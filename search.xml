<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>数组和字符串常用方法</title>
      <link href="/2021/08/15/api/"/>
      <url>/2021/08/15/api/</url>
      
        <content type="html"><![CDATA[<h1 class="bamboo-h " id="数组和字符串常用方法">数组和字符串常用方法</h1><br/><h2 id="数组常用方法"><a href="#数组常用方法" class="headerlink" title="数组常用方法"></a>数组常用方法</h2><h3 id="1-instanceof-运算符"><a href="#1-instanceof-运算符" class="headerlink" title="1. instanceof 运算符"></a><strong>1. instanceof 运算符</strong></h3><ul><li>instanceof 可以判断一个对象是否是某个构造函数的实例。</li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr <span class="token keyword">instanceof</span> <span class="token class-name">Array</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj <span class="token keyword">instanceof</span> <span class="token class-name">Array</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-Array-isArray"><a href="#2-Array-isArray" class="headerlink" title="2. Array.isArray()"></a><strong>2. Array.isArray()</strong></h3><ul><li>Array.isArray()用于判断一个对象是否为数组，isArray() 是 HTML5 中提供的方法。</li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// true</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-添加删除数组元素的方法"><a href="#3-添加删除数组元素的方法" class="headerlink" title="3. 添加删除数组元素的方法"></a><strong>3. 添加删除数组元素的方法</strong></h3><ul><li>数组中有进行增加、删除元素的方法，部分方法如下表👇</li></ul><table><thead><tr><th align="left">方法名</th><th align="left">说明</th><th align="left">返回值</th></tr></thead><tbody><tr><td align="left">puah(参数1 …)</td><td align="left">末尾添加一个或多个元素，注意！会修改原数组</td><td align="left">返回新数组的长度</td></tr><tr><td align="left">pop()</td><td align="left">删除数组最后一个元素数组长度减1没有参数、修改原数组</td><td align="left">返回删除元素的值</td></tr><tr><td align="left">unshift(参数1 …)</td><td align="left">向数组头部添加一个或多个元素，注意！会修改原数组</td><td align="left">返回新数组的长度</td></tr><tr><td align="left">shift()</td><td align="left">删除数组头部元素，数组长度减1没有参数、修改原数组</td><td align="left">返回从头部删除的元素值</td></tr></tbody></table><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 5 向数组末尾添加元素</span>arr<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//删除数组最后一个值并返回</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [1,2,3,4]</span>    <span class="token comment">// 向数组的开头添加元素并返回数组长度 </span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">unshift</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 6  数组变为[5,6,1,2,3,4]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 5 删除数组开头的元素并返回该值</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-数组排序"><a href="#4-数组排序" class="headerlink" title="4. 数组排序"></a>4. 数组排序</h3><ul><li>数组中有对数组本身排序的方法，部分方法如下表</li></ul><table><thead><tr><th align="left">方法名</th><th align="left">说明</th><th align="left">是否修改原数组</th></tr></thead><tbody><tr><td align="left">reverse()</td><td align="left">颠倒数组中元素的顺序，无参数</td><td align="left">该方法会改变原来的数组 返回新数组</td></tr><tr><td align="left">sort()</td><td align="left">对数组的元素进行排序</td><td align="left">该方法会改变原来的数组 返回新数组</td></tr></tbody></table><ul><li><p>注意：<strong>sort方法需要传入参数(函数)来设置升序、降序排序</strong></p></li><li><ul><li>如果传入“function(a,b){ return a-b;}”，则为升序</li><li>如果传入“function(a,b){ return b-a;}”，则为降序</li></ul></li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 踩坑 数组sort()排序(冒泡排序) return a - b 则升序</span><span class="token comment">// 写法固定 参考如下</span><span class="token keyword">let</span> arr1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">13</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">77</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">;</span>arr1<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span>b</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>   <span class="token keyword">return</span> a<span class="token operator">-</span>b<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr1<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-数组索引方法"><a href="#5-数组索引方法" class="headerlink" title="5. 数组索引方法"></a>5. <strong>数组索引方法</strong></h3><table><thead><tr><th>方法名</th><th>说明</th><th>是否修改原数组</th></tr></thead><tbody><tr><td>indexOf()</td><td>数组中查找给定元素的第一个索引</td><td>如果存在返回索引号，如果不存在，则返回-1。</td></tr><tr><td>lastIndexOf()</td><td>从数组最后一个索引向前查找</td><td>如果存在返回索引号，如果不存在，则返回-1。</td></tr></tbody></table><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">// 查找元素2的索引</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1</span><span class="token comment">// 查找元素1在数组中的最后一个索引</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">lastIndexOf</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="6-数组转换为字符串"><a href="#6-数组转换为字符串" class="headerlink" title="6. 数组转换为字符串"></a>6. <strong>数组转换为字符串</strong></h3><ul><li>数组中有把数组转化为字符串的方法，部分方法如下表</li><li>注意：join方法如果不传入参数，则按照 “ , ”拼接元素</li></ul><table><thead><tr><th>方法名</th><th>说明</th><th>返回值</th></tr></thead><tbody><tr><td>toString()</td><td>把数组转换成字符串，逗号分割每一项</td><td>返回一个字符串</td></tr><tr><td>join(‘分隔符’)</td><td>方法用于把数组中所有的元素转换为一个字符串</td><td>返回一个字符串</td></tr></tbody></table><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">let</span> arr2 <span class="token operator">=</span> arr<span class="token punctuation">;</span><span class="token keyword">let</span> str <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 将数组转换为字符串</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1,2,3,4</span>      <span class="token keyword">let</span> str2 <span class="token operator">=</span> arr2<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">"|"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//按照键入字符将数组转换为字符串</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str2<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="7-其他方法"><a href="#7-其他方法" class="headerlink" title="7. 其他方法"></a>7. <strong>其他方法</strong></h3><table><thead><tr><th>方法名</th><th>说明</th><th>返回值</th></tr></thead><tbody><tr><td>concat()</td><td>连接两个或多个数组，不影响原数组</td><td>返回一个新的数组</td></tr><tr><td>slice(start,end)</td><td>截取数组slice(索引号,按照索引号截取不包括最后的索引)</td><td>返回被截取项目的新数组</td></tr><tr><td>splice()</td><td>数组删除splice(start,delete0,替换)第三个参数不做替换可省略</td><td>返回被删除元素的新数组 注意，这个会影响原数组</td></tr></tbody></table><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">let</span> arr2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">let</span> arr3 <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>arr2<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr3<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [1,2,3,4,5,6,7,8]</span><span class="token comment">// slice(begin,end) 是一种左闭右开区间 [1,3)</span><span class="token comment">// 从索引1出开始截取，到索引3之前</span><span class="token keyword">let</span> arr4 <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr4<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [2,3]</span><span class="token keyword">let</span> arr5 <span class="token operator">=</span> arr2<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr5<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [5,6,7]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [8]   splice()会影响原数组</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="数组迭代遍历方法"><a href="#数组迭代遍历方法" class="headerlink" title="数组迭代遍历方法"></a>数组迭代遍历方法</h2><h3 id="1-Array-map"><a href="#1-Array-map" class="headerlink" title="1. Array.map()"></a>1. Array.map()</h3><pre class="line-numbers language-none"><code class="language-none">此方法是将数组中的每个元素调用一个提供的函数，结果作为一个新的数组返回，并没有改变原来的数组。<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token keyword">let</span> newArr <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">x</span> <span class="token operator">=></span> x<span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token comment">//arr= [1, 2, 3, 4, 5]   原数组保持不变</span><span class="token comment">//newArr = [2, 4, 6, 8, 10] 返回新数组</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>应用场景1</p><p>假定有一个数值数组,将数组中的值以双倍的形式放到另一个数组中</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token keyword">let</span> doubleNumber <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">num</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> num<span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    　　　　　console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>doubleNumber<span class="token punctuation">)</span> <span class="token comment">//[2,4,6,8,10]　</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>应用场景2</p><p>假定有一个对象数组，将数组中对象的某个属性的值存储到B数组中</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span>            <span class="token punctuation">&#123;</span>name<span class="token operator">:</span><span class="token string">'Jack'</span><span class="token punctuation">,</span>age<span class="token operator">:</span><span class="token string">'16'</span><span class="token punctuation">,</span>sex<span class="token operator">:</span><span class="token string">'男'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token punctuation">&#123;</span>name<span class="token operator">:</span><span class="token string">'Jerry'</span><span class="token punctuation">,</span>age<span class="token operator">:</span><span class="token string">'18'</span><span class="token punctuation">,</span>sex<span class="token operator">:</span><span class="token string">'男'</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token punctuation">&#123;</span>name<span class="token operator">:</span><span class="token string">'Bailey'</span><span class="token punctuation">,</span>age<span class="token operator">:</span><span class="token string">'14'</span><span class="token punctuation">,</span>sex<span class="token operator">:</span><span class="token string">'女'</span><span class="token punctuation">&#125;</span>        <span class="token punctuation">]</span> <span class="token keyword">let</span> names <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> name<span class="token punctuation">.</span>name<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>names<span class="token punctuation">)</span> <span class="token comment">//  ["Jack", "Jerry", "Bailey"]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总结： map需要返回值，不给return,默认返回undefined map返回一个新的数组　</p><h3 id="2-Array-forEach"><a href="#2-Array-forEach" class="headerlink" title="2. Array.forEach()"></a>2. Array.forEach()</h3><pre class="line-numbers language-none"><code class="language-none">此方法是将数组中的每个元素执行传进提供的函数，没有返回值，注意和map方法区分<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span>num<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">x</span> <span class="token operator">=></span> x<span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token comment">// arr = [1, 2, 3, 4, 5] 数组改变,注意和map区分</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="3-Array-filter"><a href="#3-Array-filter" class="headerlink" title="3. Array.filter()"></a>3. Array.filter()</h3><pre class="line-numbers language-none"><code class="language-none">此方法是将所有元素进行判断，将满足条件的元素作为一个新的数组返回<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token keyword">const</span> <span class="token function-variable function">isBigEnough</span> <span class="token operator">=</span> <span class="token parameter">value</span> <span class="token operator">=></span> value <span class="token operator">>=</span> <span class="token number">3</span><span class="token keyword">let</span> newArr <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>isBigEnough <span class="token punctuation">)</span><span class="token comment">//newNum = [3, 4, 5] 满足条件的元素返回为一个新的数组</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-Array-every"><a href="#4-Array-every" class="headerlink" title="4. Array.every()"></a>4. Array.every()</h3><pre class="line-numbers language-none"><code class="language-none">此方法是将所有元素进行判断返回一个布尔值，如果所有元素都满足判断条件，则返回true，否则为false：<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token keyword">const</span> <span class="token function-variable function">isLessThan4</span> <span class="token operator">=</span> <span class="token parameter">value</span> <span class="token operator">=></span> value <span class="token operator">&lt;</span> <span class="token number">4</span><span class="token keyword">const</span> <span class="token parameter">isLessThan6</span> <span class="token operator">=></span> <span class="token parameter">value</span> <span class="token operator">=></span> value <span class="token operator">&lt;</span> <span class="token number">6</span>arr<span class="token punctuation">.</span><span class="token function">every</span><span class="token punctuation">(</span>isLessThan4 <span class="token punctuation">)</span> <span class="token comment">//false</span>arr<span class="token punctuation">.</span><span class="token function">every</span><span class="token punctuation">(</span>isLessThan6 <span class="token punctuation">)</span> <span class="token comment">//true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-Array-some"><a href="#5-Array-some" class="headerlink" title="5. Array.some()"></a>5. Array.some()</h3><pre class="line-numbers language-none"><code class="language-none">此方法是将所有元素进行判断返回一个布尔值，如果存在元素都满足判断条件，则返回true，若所有元素都不满足判断条件，则返回false：<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> arr<span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token keyword">const</span> <span class="token function-variable function">isLessThan4</span> <span class="token operator">=</span> <span class="token parameter">value</span> <span class="token operator">=></span> value <span class="token operator">&lt;</span> <span class="token number">4</span><span class="token keyword">const</span> <span class="token function-variable function">isLessThan6</span> <span class="token operator">=</span> <span class="token parameter">value</span> <span class="token operator">=></span> value <span class="token operator">></span> <span class="token number">6</span>arr<span class="token punctuation">.</span><span class="token function">some</span><span class="token punctuation">(</span>isLessThan4 <span class="token punctuation">)</span> <span class="token comment">//true</span>arr<span class="token punctuation">.</span><span class="token function">some</span><span class="token punctuation">(</span>isLessThan6 <span class="token punctuation">)</span> <span class="token comment">//false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="6-Array-reduce"><a href="#6-Array-reduce" class="headerlink" title="6. Array.reduce()"></a>6. Array.reduce()</h3><pre class="line-numbers language-none"><code class="language-none">此方法是所有元素调用返回函数，返回值为最后结果,传入的值必须是函数类型：<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token keyword">const</span> <span class="token function-variable function">add</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token operator">=></span> a <span class="token operator">+</span> b<span class="token keyword">let</span> sum <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span>add<span class="token punctuation">)</span><span class="token comment">//sum = 15  相当于累加的效果与之相对应的还有一个 Array.reduceRight() 方法，区别是这个是从右向左操作的</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="字符串常用方法"><a href="#字符串常用方法" class="headerlink" title="字符串常用方法"></a>字符串常用方法</h2><h3 id="1-根据字符返回位置"><a href="#1-根据字符返回位置" class="headerlink" title="1. 根据字符返回位置"></a>1. <strong>根据字符返回位置</strong></h3><p>字符串通过基本包装类型可以调用部分方法来操作字符串，以下是返回指定字符的位置的方法：</p><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td>indexOf(‘要查找的字符,开始位置’)</td><td>返回指定内容在原字符串中的位置，如果找不到就返回-1，开始的位置是index索引号</td></tr><tr><td>lastIndexOf()</td><td>从后往前找，只找第一个匹配的</td></tr></tbody></table><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">"anndy"</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">"d"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 3</span><span class="token comment">//指定从索引号为4的地方开始查找字符"d"</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">"d"</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// -1</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">lastIndexOf</span><span class="token punctuation">(</span><span class="token string">"n"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>案例：查找字符串”abcoefoxyozzopp”中所有o出现的位置以及次数</p><ol><li> 先查找第一个o出现的位置</li><li> 然后 只要indexOf 返回的结果不是 -1 就继续往后查找</li><li> 因为indexOf 只能查找到第一个，所以后面的查找，利用第二个参数，当前索引加1，从而继续查找</li></ol><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">"oabcoefoxyozzopp"</span><span class="token punctuation">;</span><span class="token keyword">let</span> index <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">"o"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> num <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>index <span class="token operator">!==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>   console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>   num<span class="token operator">++</span><span class="token punctuation">;</span>   index <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">"o"</span><span class="token punctuation">,</span> index <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-根据位置返回字符"><a href="#2-根据位置返回字符" class="headerlink" title="2. 根据位置返回字符"></a>2. <strong>根据位置返回字符</strong></h3><p>字符串通过基本包装类型可以调用部分方法来操作字符串，以下是根据位置返回指定位置上的字符：</p><table><thead><tr><th>方法名</th><th>说明</th><th>使用</th></tr></thead><tbody><tr><td>charAt(index)</td><td>返回指定位置的字符(index字符串的索引号)</td><td>str.charAt(0)</td></tr><tr><td>chartCodeAt(index)</td><td>获取指定位置字符的ASCLL码值(index索引号)</td><td>chartCodeAt(0)</td></tr><tr><td>str[index]</td><td>h5新增方法获取指定位置字符</td><td>HTML5，IE8+支持和charAt()等效</td></tr></tbody></table><pre class="line-numbers language-js" data-language="js"><code class="language-js"> <span class="token comment">// 根据位置返回字符</span> <span class="token comment">// 1. charAt(index) 根据位置返回字符</span> <span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">'andy'</span><span class="token punctuation">;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// y</span> <span class="token comment">// 遍历所有的字符</span> <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> str<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>     console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span> <span class="token comment">// a n d y</span>      <span class="token comment">// 2. charCodeAt(index)  </span><span class="token comment">//返回相应索引号的字符ASCII值 目的： 判断用户按下了那个键 </span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">charCodeAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 97</span><span class="token comment">// 3. str[index] H5 新增的</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// a</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-字符串操作方法"><a href="#3-字符串操作方法" class="headerlink" title="3. 字符串操作方法"></a>3. <strong>字符串操作方法</strong></h3><p>字符串通过基本包装类型可以调用部分方法来操作字符串，以下是部分操作方法：</p><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td>concat(str1,str2,str3 ….)</td><td>concat()用于连接两个或多个字符串，拼接字符串，等效于+，+更常用</td></tr><tr><td>substr(start,length)</td><td>从start位置开始(索引号)，length截取的个数</td></tr><tr><td>slice(start,end)</td><td>从start位置开始，截取到end位置不包括end(他们两都是索引号)</td></tr><tr><td>substring(start,end)</td><td>从start位置开始，截取到end位置不包括end(他们两都是索引号)不接收负数</td></tr></tbody></table><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 字符串操作方法</span><span class="token comment">// 1. concat('字符串1','字符串2'....)</span><span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">'andy'</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token string">'red'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// andyred</span><span class="token comment">// 2. substr('截取的起始位置', '截取几个字符');</span><span class="token keyword">let</span> str1 <span class="token operator">=</span> <span class="token string">'改革春风吹满地'</span><span class="token punctuation">;</span><span class="token comment">// 第一个2 是索引号的2 从第几个开始  第二个2 是取几个字符</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str1<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 春风</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-replace-方法"><a href="#4-replace-方法" class="headerlink" title="4. replace()方法"></a>4. <strong>replace()方法</strong></h3><ul><li>replace() 方法用于在字符串中用一些字符替换另一些字符，其使用格式如下：</li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js">字符串<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>被替换的字符串， 要替换为的字符串<span class="token punctuation">)</span>；<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="5-split-方法"><a href="#5-split-方法" class="headerlink" title="5. split()方法"></a>5. <strong>split()方法</strong></h3><ul><li>split()方法用于切分字符串，它可以将字符串切分为数组。在切分完毕之后，返回的是一个新数组。</li><li>其使用格式如下：</li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js">字符串<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"分割字符"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 1. 替换字符 replace('被替换的字符', '替换为的字符')  它只会替换第一个字符</span><span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">"andyandy"</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">,</span> <span class="token string">"b"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// bndyandy</span><span class="token comment">// 有一个字符串 'abcoefoxyozzopp'  要求把里面所有的 o 替换为 *</span><span class="token keyword">let</span> str1 <span class="token operator">=</span> <span class="token string">"abcoefoxyozzopp"</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>str1<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">"o"</span><span class="token punctuation">)</span> <span class="token operator">!==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>   str1 <span class="token operator">=</span> str1<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">"o"</span><span class="token punctuation">,</span> <span class="token string">"*"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// abc*ef*xy*zz*pp</span><span class="token comment">// 2. 字符转换为数组 split('分隔符')    </span><span class="token comment">// 前面我们学过 join 把数组转换为字符串</span><span class="token keyword">let</span> str2 <span class="token operator">=</span> <span class="token string">"red, pink, blue"</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str2<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//[red,pink,blue]</span><span class="token keyword">let</span> str3 <span class="token operator">=</span> <span class="token string">"red&amp;pink&amp;blue"</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str3<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"&amp;"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [red,pink,blue]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="6-match-regexp-方法"><a href="#6-match-regexp-方法" class="headerlink" title="6. match(regexp)方法"></a>6. match(regexp)方法</h3><p>根据正则表达式在字符串中搜索匹配项。如果没有找到匹配项，则返回一个信息数组或<code>null</code>。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">//match(regexp) //select integers only</span><span class="token keyword">let</span> intRegex <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">[0-9 -()+]+$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span>   <span class="token keyword">let</span> myNumber <span class="token operator">=</span> <span class="token string">'999'</span><span class="token punctuation">;</span><span class="token keyword">let</span> myInt <span class="token operator">=</span> myNumber<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>intRegex<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>isInt<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//output: 999</span> <span class="token keyword">let</span> myString <span class="token operator">=</span> <span class="token string">'999 JS Coders'</span><span class="token punctuation">;</span><span class="token keyword">let</span> myInt <span class="token operator">=</span> myString<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>intRegex<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>isInt<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//output: null</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="7-search-regexp-方法"><a href="#7-search-regexp-方法" class="headerlink" title="7. search(regexp)方法"></a>7. search(regexp)方法</h3><p><code>search()</code> 方法用于检索字符串中指定的子字符串，或检索与正则表达式相匹配的子字符串，如果找到，返回与 <code>regexp</code> 相匹配的子串的起始位置，否则返回 <code>-1</code>。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">//search(regexp)</span><span class="token keyword">let</span> intRegex <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">[0-9 -()+]+$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span>   <span class="token keyword">let</span> myNumber <span class="token operator">=</span> <span class="token string">'999'</span><span class="token punctuation">;</span><span class="token keyword">let</span> isInt <span class="token operator">=</span> myNumber<span class="token punctuation">.</span><span class="token function">search</span><span class="token punctuation">(</span>intRegex<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>isInt<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//output: 0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="8-toLowerCase-方法"><a href="#8-toLowerCase-方法" class="headerlink" title="8. toLowerCase()方法"></a>8. toLowerCase()方法</h3><p><code>toLowerCase()</code> 方法用于把字符串转换为小写。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">//toLowerCase()</span><span class="token keyword">let</span> myString <span class="token operator">=</span> <span class="token string">'JAVASCRIPT ROX'</span><span class="token punctuation">;</span>myString <span class="token operator">=</span> myString<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>myString<span class="token punctuation">)</span><span class="token comment">//output: javascript rox</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="9-toUpperCase-方法"><a href="#9-toUpperCase-方法" class="headerlink" title="9. toUpperCase()方法"></a>9. toUpperCase()方法</h3><p><code>toUpperCase()</code> 方法用于把字符串转换为大写。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">//toUpperCase()</span><span class="token keyword">let</span> myString <span class="token operator">=</span> <span class="token string">'javascript rox'</span><span class="token punctuation">;</span>myString <span class="token operator">=</span> myString<span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>myString<span class="token punctuation">)</span><span class="token comment">//output: JAVASCRIPT ROX</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="10-includes-方法"><a href="#10-includes-方法" class="headerlink" title="10. includes()方法"></a>10. includes()方法</h3><p><code>includes()</code> 方法用于检查字符串是否包含指定的字符串或字符。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">//includes()</span><span class="token keyword">let</span> mystring <span class="token operator">=</span> <span class="token string">"Hello, welcome to edureka"</span><span class="token punctuation">;</span><span class="token keyword">let</span> n <span class="token operator">=</span> mystring<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token string">"edureka"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//output: True</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="11-trim-方法"><a href="#11-trim-方法" class="headerlink" title="11. trim()方法"></a>11. trim()方法</h3><p><code>trim()</code> 方法会从一个字符串的两端删除空白字符。在这个上下文中的空白字符是所有的空白字符 (space, tab, no-break space 等) 以及所有行终止符字符。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">//trim()</span><span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">"Hello Edureka!"</span><span class="token punctuation">;</span><span class="token function">alert</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MVC和MVVM</title>
      <link href="/2021/07/16/pattern/"/>
      <url>/2021/07/16/pattern/</url>
      
        <content type="html"><![CDATA[<h1 class="bamboo-h " id="mvc和mvvm的区别">mvc和mvvm的区别</h1><br/><h2 id="MVC"><a href="#MVC" class="headerlink" title="MVC"></a>MVC</h2><p>MVC 全名是 Model View Controller，是模型(model)－视图(view)－控制器(controller)的缩写，一种软件设计典范。</p><ul><li>Model（模型）：是应用程序中用于处理应用程序数据逻辑的部分。通常模型对象负责在数据库中存取数据。</li><li>View（视图）：是应用程序中处理数据显示的部分。通常视图是依据模型数据创建的。</li><li>Controller（控制器）：是应用程序中处理用户交互的部分。通常控制器负责从视图读取数据，控制用户输入，并向模型发送数据。</li></ul><p>MVC 的思想：一句话描述就是 Controller 负责将 Model 的数据用 View 显示出来，换句话说就是在 Controller 里面把 Model 的数据赋值给 View。</p><h2 id="MVVM"><a href="#MVVM" class="headerlink" title="MVVM"></a>MVVM</h2><h3 id="MVVM-新增了-VM-类"><a href="#MVVM-新增了-VM-类" class="headerlink" title="MVVM 新增了 VM 类"></a>MVVM 新增了 VM 类</h3><ul><li>ViewModel 层：做了两件事达到了数据的双向绑定 一是将【模型】转化成【视图】，即将后端传递的数据转化成所看到的页面。实现的方式是：数据绑定。二是将【视图】转化成【模型】，即将所看到的页面转化成后端的数据。实现的方式是：DOM 事件监听。</li></ul><p>MVVM 与 MVC 最大的区别就是：它实现了 View 和 Model 的自动同步，也就是当 Model 的属性改变时，我们不用再自己手动操作 Dom 元素，来改变 View 的显示，而是改变属性后该属性对应 View 层显示会自动改变（对应Vue数据驱动的思想）<br>整体看来，MVVM 比 MVC 精简很多，不仅简化了业务与界面的依赖，还解决了数据频繁更新的问题，不用再用选择器操作 DOM 元素。因为在 MVVM 中，View 不知道 Model 的存在，Model 和 ViewModel 也观察不到 View，这种低耦合模式提高代码的可重用性。</p><pre><code>&#123;% span red, 注意：Vue 并没有完全遵循 MVVM 的思想 这一点官网自己也有说明。 %&#125;</code></pre><p>那么问题来了 为什么官方要说 Vue 没有完全遵循 MVVM 思想呢？</p><pre><code>严格的 MVVM 要求 View 不能和 Model 直接通信，而 Vue 提供了$refs 这个属性，让 Model 可以直接操作 View，违反了这一规定，    所以说 Vue 没有完全遵循 MVVM。</code></pre><p>引用自:</p><ul><li>链接：<a target="_blank" rel="noopener" href="https://juejin.cn/post/6961222829979697165">https://juejin.cn/post/6961222829979697165</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>正则表达式</title>
      <link href="/2021/07/11/regexp/"/>
      <url>/2021/07/11/regexp/</url>
      
        <content type="html"><![CDATA[<h1 class="bamboo-h " id="正则表达式">正则表达式</h1><br/><h2 id="什么是正则表达式"><a href="#什么是正则表达式" class="headerlink" title="什么是正则表达式"></a>什么是正则表达式</h2><pre class="line-numbers language-none"><code class="language-none">正则表达式是用于匹配字符串中字符组合模式。在javascript中，正则表达式也是对象。<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">正则表达式通常被用来检索、替换那些符合某个模式(规则)的文本，例如表单验证：用户名表单只能输入英文字母、数字或者下划线，昵称输入框中可以输入中文(匹配)。此外，正则表达式还常用于过滤掉页面内容中的一些敏感词(替换)，或字符串中获取我们想要的特定部分(提取)等。<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="正则表达式的特点"><a href="#正则表达式的特点" class="headerlink" title="正则表达式的特点"></a>正则表达式的特点</h3><ol><li>灵活性，逻辑性和功能性非常的强。</li><li>可以迅速地用简单的方式达到字符串的复杂控制。</li><li>对于刚接触的人来说比较晦涩难懂。比如：^\w+([-+.]\w+)<em>@\w+([-.]\w+)</em>$。</li><li>实际开发，一般都是复制写好的正则表达式，但是要求会使用正则表达式并且根据实际情况修改正则表达式.比如用户名：/^[a-z0-9_-]{3,16}$/。</li></ol><h3 id="创建正则表达式"><a href="#创建正则表达式" class="headerlink" title="创建正则表达式"></a>创建正则表达式</h3><h4 id="在-javascript-中，可以通过两种方式创建一个正则表达式。"><a href="#在-javascript-中，可以通过两种方式创建一个正则表达式。" class="headerlink" title="在 javascript 中，可以通过两种方式创建一个正则表达式。"></a>在 javascript 中，可以通过两种方式创建一个正则表达式。</h4><ol><li><p>通过调用 RegExp 对象的构造函数创建。</p><pre class="line-numbers language-none"><code class="language-none">var 变量名 &#x3D; new RegExp(&#x2F;表达式&#x2F;);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>通过字面量创建</p><pre class="line-numbers language-none"><code class="language-none">var 变量名 &#x3D; &#x2F;表达式&#x2F;;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="测试正则表达式-test-方法"><a href="#测试正则表达式-test-方法" class="headerlink" title="测试正则表达式 test 方法"></a>测试正则表达式 test 方法</h3></li></ol><ul><li>test()正则对象方法，用于检测字符串是否符合规则，该对象会返回 true 或 false，其参数是测试字符串。</li></ul><p><code>regexobj.test(str)</code></p><ol><li>regexobj 是写的正则表达式</li><li>str 我们要测试的文本</li><li>就是检测 str 文本是否符合我们写的正则表达式规范。</li></ol><h3 id="正则表达式中的特殊字符"><a href="#正则表达式中的特殊字符" class="headerlink" title="正则表达式中的特殊字符"></a>正则表达式中的特殊字符</h3><h4 id="正则表达式的组成"><a href="#正则表达式的组成" class="headerlink" title="正则表达式的组成"></a>正则表达式的组成</h4><p>一个正则表达式可以由简单的字符构成，比如/abc/，也可以是简单和特殊字符的组合，比如/ab*c/。其中特殊字符也被称为元字符，在正则表达式中是具有特殊意义的专用符号，如、$、+等。</p><h3 id="边界符"><a href="#边界符" class="headerlink" title="边界符"></a>边界符</h3><ol><li>^:表示匹配首行的文本(以谁开始)</li><li>$:表示匹配行尾的文本(以谁结束)</li></ol><p>代码示例:</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">//边界符</span><span class="token keyword">var</span> reg <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^abc</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>reg<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">"abc"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>reg<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">"aabc"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>reg<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">"abcabc"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> result <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^abc$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">"abc"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">"abcabc"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="字符类"><a href="#字符类" class="headerlink" title="字符类"></a>字符类</h3><pre class="line-numbers language-none"><code class="language-none">字符类表示有一系列字符可供选择，只要匹配其中一个就可以了。所有可供选择的字符都放在方括号内。<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[-]方括号内部 范围符-<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>代码示例:</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">//字符类：[]表示由一系列字符可供选择，只要匹配其中一个就可以</span><span class="token comment">//只要包含a和b或者c都行</span><span class="token keyword">var</span> res <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">[abc]</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">"abc"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">"aredf"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">"blue"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">"color"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">"red"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//三选一只有a和b或者c才返回true</span><span class="token keyword">var</span> res2 <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^[abc]$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res2<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res2<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">"b"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res2<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">"b"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res2<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">"abc"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//匹配26个字母当中任何一个(不包括大写26个字母) 返回true</span><span class="token keyword">var</span> res3 <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^[a-z]$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res3<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res3<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">"e"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res3<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">"f"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res3<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">"A"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li>字符组合<br><code>/^[a-zA-Z0-9_-]$/</code></li><li>[^]方括号内部 取反符^<br><code>/^[^abc]$</code></li></ol><p>代码示例:</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">//字符组合</span><span class="token keyword">var</span> res4 <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^[abcA-z_-]$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res4<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res4<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">"A"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res4<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">"_"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res4<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">"-"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res4<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">"!"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//取反字符组合</span><span class="token keyword">var</span> res4 <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^[^abcA-z_-]$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res4<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res4<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">"A"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res4<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">"_"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res4<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">"-"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res4<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">"+"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="量词符"><a href="#量词符" class="headerlink" title="量词符"></a>量词符</h3><p>量词符用来设定某个模式出现的次数</p><table><thead><tr><th>量词</th><th align="center">说明</th></tr></thead><tbody><tr><td>*</td><td align="center">重复零次或更多次</td></tr><tr><td>+</td><td align="center">重复一次或跟多次</td></tr><tr><td>？</td><td align="center">重复零次或一次</td></tr><tr><td>{n}</td><td align="center">重复 n 次</td></tr><tr><td>{n,}</td><td align="center">重复 n 次或更多次</td></tr><tr><td>{n,m}</td><td align="center">重复 n 到 m 次</td></tr></tbody></table><p>代码示例:</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> res5 <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^[abcA-z0-9_-]&#123;6,16&#125;$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res5<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">"name-andy"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res5<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">"andy_red"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res5<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">"andyjFGHXH5678z"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res5<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">"andy!"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>表单验证案例:</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">//表单验证案例</span><span class="token keyword">var</span> reg <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^[a-zA-Z0-9_-]&#123;6,16&#125;$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span><span class="token keyword">var</span> text <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">"input"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> font <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">"span"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>text<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"blur"</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>reg<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    font<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token string">"输入的格式正确!"</span><span class="token punctuation">;</span>    font<span class="token punctuation">.</span>className <span class="token operator">=</span> <span class="token string">"right"</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">==</span> <span class="token string">""</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    font<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token string">"请输入内容哦！"</span><span class="token punctuation">;</span>    font<span class="token punctuation">.</span>className <span class="token operator">=</span> <span class="token string">"blue"</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>    font<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token string">"输入的格式错误！请重新输入！"</span><span class="token punctuation">;</span>    font<span class="token punctuation">.</span>className <span class="token operator">=</span> <span class="token string">"erro"</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="括号总结"><a href="#括号总结" class="headerlink" title="括号总结"></a>括号总结</h3><ol><li>大括号 量词符 里面表示重复次数</li><li>中括号字符集合。匹配方括号中的任意字符(多选一)</li><li>小括号表示优先级</li></ol><h3 id="预定义类"><a href="#预定义类" class="headerlink" title="预定义类"></a>预定义类</h3><table><thead><tr><th>预定义类</th><th align="center">说明</th></tr></thead><tbody><tr><td>\d</td><td align="center">匹配 0-9 任意数字，相当于[0-9]</td></tr><tr><td>\D</td><td align="center">匹配 0-9 以外的字符，相当于[^0-9]</td></tr><tr><td>\w</td><td align="center">匹配任意的字母，数字和下划线，相当于[A-Za-z0-9]</td></tr><tr><td>\W</td><td align="center">除所有字母、数字和下划线以外的字符，相当于[^a-za-z0-9]</td></tr><tr><td>\s</td><td align="center">匹配空格(包括换行符、制表符、空格等)，相当于[\t\r\n\v\f]</td></tr><tr><td>\S</td><td align="center">匹配非空格的字符，相当于[^\t\r\n\v\f]</td></tr></tbody></table><h3 id="表单验证案例分析"><a href="#表单验证案例分析" class="headerlink" title="表单验证案例分析"></a>表单验证案例分析</h3><ol><li>手机号码：/^1[3|4|5|7|8]\d{9}$/</li><li>QQ:[1-9][0-9]{4,}(腾讯 QQ 号从 10000 开始) 3.昵称中文：^[\u4e00-\u9fa5]{2,8}$</li></ol><h3 id="正则表达式中的替换"><a href="#正则表达式中的替换" class="headerlink" title="正则表达式中的替换"></a>正则表达式中的替换</h3><p>replace()方法可以实现替换字符操作，用来替换的参数可以是一个字符串或是一个正则表达式。</p><p><code>string.replace(reg/substr/replace)</code></p><ol><li>第一个参数：被替换的字符串或者正则表达式</li><li>第二个参数：替换为的字符串</li><li>返回值是一个替换完毕的新字符串</li></ol><h3 id="正则表达式参数"><a href="#正则表达式参数" class="headerlink" title="正则表达式参数"></a>正则表达式参数</h3><pre class="line-numbers language-none"><code class="language-none">&#x2F;表达式&#x2F;[switch]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>switch(也称为修饰符)按照什么样的模式来匹配有三种值：</p><ul><li>g:全局匹配</li><li>i:忽略大小</li><li>gi:全局匹配+忽略大小写</li></ul><p>案例:</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> text <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">"textarea"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> btn <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">"button"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> div <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">"div"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>btn<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"click"</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  div<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> text<span class="token punctuation">.</span>value<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">激情|傻子</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token string">"**"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> js </category>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> js </tag>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>es5新增方法</title>
      <link href="/2021/07/10/newadd/"/>
      <url>/2021/07/10/newadd/</url>
      
        <content type="html"><![CDATA[<h1 class="bamboo-h " id="ES5中新增方法">ES5中新增方法</h1><br/><p>迭代遍历方法：forEach() map() filter() some() every()<br><code>1.array.forEach(function(value,index,arr))</code></p><ul><li>value:数组当前的值</li><li>index:数组当前的索引</li><li>arr:数组对象本身</li></ul><p>代码示例:</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">//forEach方法</span><span class="token keyword">var</span> arr<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">var</span> sum<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">var</span> res <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">value<span class="token punctuation">,</span>index<span class="token punctuation">,</span>arrs</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> sum <span class="token operator">+=</span> value<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>2.array.filter(function(value,index,arr))</code></p><p>filter()方法创建一个新的数组，新数组中的元素是通过检查指定数组中符合条件的所有元素，主要用于筛选数组还有当过滤器来使用。</p><ul><li>注意它直接返回一个新数组</li><li>value:数组当前项的值</li><li>index:数组当前</li><li>arr:数组对象本身</li></ul><p>代码示例:</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 2.filter方法</span><span class="token keyword">var</span> arr<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">15</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">35</span><span class="token punctuation">,</span><span class="token number">45</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">var</span> newarr<span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">value<span class="token punctuation">,</span>index<span class="token punctuation">,</span>arrs</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> value<span class="token operator">></span><span class="token number">10</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>newarr<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>3.array.some(value,index,arr)</code></p><ul><li>some()方法用于检测数组中的元素是否满足条件，通俗点 查找数组中是否有满足条件的元素。</li><li>注意它的返回值是布尔值，如果查找到这个元素，就返回true，如果查不到就返回false.</li><li>如果找到第一个满足条件的元素，则终止循环，不在继续查找。</li><li>value:数组当前项的值</li><li>index:数组当前</li><li>arr:数组对象本身</li></ul><p>代码示例:</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 3.some方法</span><span class="token keyword">let</span> arr<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'red'</span><span class="token punctuation">,</span><span class="token string">'blue'</span><span class="token punctuation">,</span><span class="token string">'green'</span><span class="token punctuation">,</span><span class="token string">'blue'</span><span class="token punctuation">,</span><span class="token string">'block'</span><span class="token punctuation">,</span><span class="token string">'pink'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">let</span> newarr<span class="token operator">=</span>arr<span class="token punctuation">.</span><span class="token function">some</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> value<span class="token operator">==</span><span class="token string">'blue'</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>newarr<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="字符串方法trim"><a href="#字符串方法trim" class="headerlink" title="字符串方法trim()"></a>字符串方法trim()</h3><ul><li>trim()方法会从一个字符串的两端删除空白字符。</li><li>trim()方法并不影响原字符串本身，它返回的是一个新的字符串。</li></ul><p>代码示例:</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">//字符串trim()方法案例</span><span class="token keyword">var</span> input<span class="token operator">=</span>document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'input'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> btn<span class="token operator">=</span>document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'button'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> box<span class="token operator">=</span>document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>btn<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">var</span> str<span class="token operator">=</span>input<span class="token punctuation">.</span>value<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>str<span class="token operator">==</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'请输入内容'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>box<span class="token punctuation">.</span>innerHTML<span class="token operator">=</span>input<span class="token punctuation">.</span>value<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>btn<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'blur'</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>box<span class="token punctuation">.</span>innerHTML<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">;</span>input<span class="token punctuation">.</span>value<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="对象方法Object-keys"><a href="#对象方法Object-keys" class="headerlink" title="对象方法Object.keys()"></a>对象方法Object.keys()</h3><p><code>    1.Object.keys(obj)</code></p><ul><li>效果类似for in</li><li>返回一个有属性名组成的数组</li></ul><p>代码示例:</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">//获取对象属性的方法Object.keys(obj);</span><span class="token keyword">var</span> obj<span class="token operator">=</span><span class="token punctuation">&#123;</span>name<span class="token operator">:</span><span class="token string">'刘德华'</span><span class="token punctuation">,</span>age<span class="token operator">:</span><span class="token number">18</span><span class="token punctuation">,</span>xb<span class="token operator">:</span><span class="token string">'男'</span><span class="token punctuation">&#125;</span><span class="token keyword">var</span> newobj<span class="token operator">=</span>Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>newobj<span class="token punctuation">)</span>newobj<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Object-defineProperty-定义新属性或修改原有的属性"><a href="#Object-defineProperty-定义新属性或修改原有的属性" class="headerlink" title="Object.defineProperty()定义新属性或修改原有的属性"></a>Object.defineProperty()定义新属性或修改原有的属性</h3><p><code>2.Object.defineProperty(obj,prop,descriptor)</code></p><ul><li>Object.defineProperty()第三个参数descriptor说明:以对象形式{}书写</li><li>value：设置属性的值 默认为undefined</li><li>writable：值是否可以重写(修改)。true|fase默认为false</li><li>enumerable：目标属性是否可以被枚举(遍历)，true|false默认为 false</li><li>configurable：目标属性是否可以被删除或是否可以再次修改特性true|false 默认为false</li><li>对象如果存在相关属性，value就是修改属性没有则是添加</li></ul><p>代码示例:</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">//Object.defineProperty()定义新属性或修改原有的属性</span><span class="token keyword">var</span> obj<span class="token operator">=</span><span class="token punctuation">&#123;</span>name<span class="token operator">:</span><span class="token string">'刘德华'</span><span class="token punctuation">,</span>age<span class="token operator">:</span><span class="token number">18</span><span class="token punctuation">,</span>sex<span class="token operator">:</span><span class="token string">'男'</span><span class="token punctuation">&#125;</span>Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span><span class="token string">'age'</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span>value<span class="token operator">:</span><span class="token number">20</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span><span class="token string">'id'</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span>writable<span class="token operator">:</span><span class="token boolean">false</span><span class="token punctuation">;</span><span class="token comment">//不允许修改</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> js </category>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> js </tag>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
