<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>MVC和MVVM</title>
      <link href="/2021/07/16/pattern/"/>
      <url>/2021/07/16/pattern/</url>
      
        <content type="html"><![CDATA[<h1 class="bamboo-h " id="mvc和mvvm的区别">mvc和mvvm的区别</h1><br/><h2 id="MVC"><a href="#MVC" class="headerlink" title="MVC"></a>MVC</h2><p>MVC 全名是 Model View Controller，是模型(model)－视图(view)－控制器(controller)的缩写，一种软件设计典范。</p><ul><li>Model（模型）：是应用程序中用于处理应用程序数据逻辑的部分。通常模型对象负责在数据库中存取数据。</li><li>View（视图）：是应用程序中处理数据显示的部分。通常视图是依据模型数据创建的。</li><li>Controller（控制器）：是应用程序中处理用户交互的部分。通常控制器负责从视图读取数据，控制用户输入，并向模型发送数据。</li></ul><p>MVC 的思想：一句话描述就是 Controller 负责将 Model 的数据用 View 显示出来，换句话说就是在 Controller 里面把 Model 的数据赋值给 View。</p><h2 id="MVVM"><a href="#MVVM" class="headerlink" title="MVVM"></a>MVVM</h2><h3 id="MVVM-新增了-VM-类"><a href="#MVVM-新增了-VM-类" class="headerlink" title="MVVM 新增了 VM 类"></a>MVVM 新增了 VM 类</h3><ul><li>ViewModel 层：做了两件事达到了数据的双向绑定 一是将【模型】转化成【视图】，即将后端传递的数据转化成所看到的页面。实现的方式是：数据绑定。二是将【视图】转化成【模型】，即将所看到的页面转化成后端的数据。实现的方式是：DOM 事件监听。</li></ul><p>MVVM 与 MVC 最大的区别就是：它实现了 View 和 Model 的自动同步，也就是当 Model 的属性改变时，我们不用再自己手动操作 Dom 元素，来改变 View 的显示，而是改变属性后该属性对应 View 层显示会自动改变（对应Vue数据驱动的思想）<br>整体看来，MVVM 比 MVC 精简很多，不仅简化了业务与界面的依赖，还解决了数据频繁更新的问题，不用再用选择器操作 DOM 元素。因为在 MVVM 中，View 不知道 Model 的存在，Model 和 ViewModel 也观察不到 View，这种低耦合模式提高代码的可重用性。</p><blockquote><span class='p red'>注意：Vue 并没有完全遵循 MVVM 的思想 这一点官网自己也有说明。</span></blockquote><p>那么问题来了 为什么官方要说 Vue 没有完全遵循 MVVM 思想呢？</p><blockquote><ul><li>严格的 MVVM 要求 View 不能和 Model 直接通信，而 Vue 提供了$refs 这个属性，让 Model 可以直接操作 View，违反了这一规定，所以说 Vue 没有完全遵循 MVVM。</li></ul></blockquote><p>引用自:</p><ul><li>链接：<a target="_blank" rel="noopener" href="https://juejin.cn/post/6961222829979697165">https://juejin.cn/post/6961222829979697165</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ES6</title>
      <link href="/2021/07/12/es6/"/>
      <url>/2021/07/12/es6/</url>
      
        <content type="html"><![CDATA[<h1 class="bamboo-h " id="ES6简介">ES6简介</h1><br/><h2 id="什么是ES6"><a href="#什么是ES6" class="headerlink" title="什么是ES6?"></a>什么是ES6?</h2><p class='p blue'>ES的全称是ECMAScript</p><h3 id="为什么使用ES6"><a href="#为什么使用ES6" class="headerlink" title="为什么使用ES6"></a>为什么使用ES6</h3><p>每一次标准的诞生都意味着语言的完善，功能的加强。javaScript语言本身也有一些令人不满意的地方。</p><ul><li>变量提升特性增加了程序运行时的不可预测性</li><li>语法过于松散，实现相同的功能，不同的人可能会写出不同的代码。</li></ul><h3 id="ES6新增语法"><a href="#ES6新增语法" class="headerlink" title="ES6新增语法"></a>ES6新增语法</h3><h4 id="let"><a href="#let" class="headerlink" title="let"></a>let</h4><p class='p blue'>ES6中新增的用于声明变量的关键字</p><p class='p red'>注意:let声明的变量只在所处于的块级有效。</p><p>用let声明的变量不存在变量提升。</p><p class='p red'>注意：使用let关键字声明的变量才具有块级作用域，使用var声明的变量不具备块级作用域特性。</p><ul><li>let还可以防止循环变量变成全局变量。</li><li>用let声明的变量还存在暂时性死区(也就是说在外面声明的变量在块级作用域下使用然后再在块级作用域里面用let声明相同的变量这时就会报错)。</li></ul><h4 id="const"><a href="#const" class="headerlink" title="const"></a>const</h4><ol><li>作用：声明常量，常量就是值(内存地址)不能变化的量。</li><li>const具有块级作用域。</li><li>声明常量必须赋值不然就会报错。</li><li>常量赋值后不能被修改。复杂类型的值内部可以被修改但是不能赋值，比如说数组可以通过下标赋值(const a[0]=123)。</li></ol><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>   <span class="token keyword">const</span> a<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">&#125;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token comment">//报错</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p class='p red'>注意:const声明的常量只能在他的作用域起效。</p><h4 id="let、const、var-的区别"><a href="#let、const、var-的区别" class="headerlink" title="let、const、var 的区别"></a>let、const、var 的区别</h4><ol><li>使用var声明的变量，其作用域为该语句所在的函数内，且存在变量提升。</li><li>使用let声明的变量，其作用域为该语句所在的代码块内，不存在变量提升。</li><li>使用const声明的是常量，在后面出现的代码中不能修改常量的值。</li></ol><h2 id="ES6的新增语法"><a href="#ES6的新增语法" class="headerlink" title="ES6的新增语法"></a>ES6的新增语法</h2><h3 id="解构赋值"><a href="#解构赋值" class="headerlink" title="解构赋值"></a>解构赋值</h3><p>ES6中允许从数组中提取值，按照对应位置，对变量赋值。对象也可以实现解构。</p><h3 id="数组解构"><a href="#数组解构" class="headerlink" title="数组解构"></a>数组解构</h3><p>示例: </p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> arr<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">let</span> <span class="token punctuation">[</span>a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>c<span class="token punctuation">]</span><span class="token operator">=</span>arr<span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//[a,b,c]是解构也就是说abc的值是对应123并且对应这赋相应的值。如果数组里面有多个变量但是没有对应的值其结果就是未定义的。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="对象解构"><a href="#对象解构" class="headerlink" title="对象解构"></a>对象解构</h3><p>示例:</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">//匹配相应的值如果对象里面有相关属性就赋值</span><span class="token keyword">let</span> obj<span class="token operator">=</span><span class="token punctuation">&#123;</span> name<span class="token operator">:</span><span class="token string">'李四'</span><span class="token punctuation">,</span> age<span class="token operator">:</span><span class="token number">18</span><span class="token punctuation">,</span> sex<span class="token operator">:</span><span class="token string">'男'</span><span class="token punctuation">&#125;</span><span class="token keyword">let</span> <span class="token punctuation">&#123;</span>name<span class="token punctuation">,</span>age<span class="token punctuation">,</span>sex<span class="token punctuation">&#125;</span><span class="token operator">=</span>obj<span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>sex<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="箭头函数"><a href="#箭头函数" class="headerlink" title="箭头函数"></a>箭头函数</h3><ol><li>ES6中新增的定义函数的方式</li></ol><p>示例:</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> <span class="token function-variable function">fn</span><span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ol start="2"><li>函数体中只有一句代码，且代码执行结果就是返回值，可以省略大括号。</li></ol><p>示例:</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">//原始写法</span><span class="token keyword">function</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token parameter">num1<span class="token punctuation">,</span>num2</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> num1<span class="token operator">+</span>num2<span class="token punctuation">&#125;</span><span class="token comment">//ES6新语法</span><span class="token keyword">const</span> <span class="token function-variable function">sum</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">num1<span class="token punctuation">,</span>num2</span><span class="token punctuation">)</span> <span class="token operator">=></span>num1<span class="token operator">+</span>num2<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="3"><li>如果形参只有一个，可以省略小括号</li></ol><p>示例:</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token parameter">v</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> v<span class="token punctuation">&#125;</span><span class="token comment">//ES6新语法</span><span class="token keyword">const</span> <span class="token function-variable function">fn</span> <span class="token operator">=</span> <span class="token parameter">v</span> <span class="token operator">=></span> v<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p class='p red'>箭头函数不绑定this关键字，如果要在箭头函数中使用this，那么this关键字将指向箭头函数定义位置中的this。</p><p class='p red'>注意：对象不能产生作用域，如果对象属性里面有箭头函数那么this的指向是window。</p><h3 id="剩余参数"><a href="#剩余参数" class="headerlink" title="剩余参数"></a>剩余参数</h3><ol><li>剩余参数语法允许我们将一个不确定数量的参数表示为一个数组。</li></ol><p>示例:</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">sum</span> <span class="token punctuation">(</span><span class="token parameter">frist<span class="token punctuation">,</span><span class="token operator">...</span>args</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>frist<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//10</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//20 30</span><span class="token punctuation">&#125;</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>…代表接收所有实参</p></blockquote><p>示例:    </p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">//求和</span> <span class="token keyword">let</span> <span class="token function-variable function">getsum</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>args</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span> <span class="token keyword">let</span> sum<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> args<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">value<span class="token punctuation">,</span>i<span class="token punctuation">,</span>ele</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span> sum<span class="token operator">=</span>sum<span class="token operator">+</span>value<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">return</span> sum<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span> <span class="token keyword">let</span> result<span class="token operator">=</span><span class="token function">getsum</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>剩余参数可以和解构配合使用</li></ol><p>示例:</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">//剩余参数和解构配合使用</span><span class="token keyword">let</span> arr<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'张三'</span><span class="token punctuation">,</span><span class="token string">'李四'</span><span class="token punctuation">,</span><span class="token string">'王二'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">let</span> <span class="token punctuation">[</span>ar<span class="token punctuation">,</span><span class="token operator">...</span>args<span class="token punctuation">]</span><span class="token operator">=</span>arr<span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>ar<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Array的扩展方法"><a href="#Array的扩展方法" class="headerlink" title="Array的扩展方法"></a>Array的扩展方法</h3><h4 id="扩展运算符-展开语法"><a href="#扩展运算符-展开语法" class="headerlink" title="扩展运算符(展开语法)"></a>扩展运算符(展开语法)</h4><ol><li>扩展运算符可以将数组或者对象转为用逗号分隔的参数序列(在console.log里面逗号将被解析成空格符)。</li></ol><p>示例:</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> arr<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span><span class="token string">'b'</span><span class="token punctuation">,</span><span class="token string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token operator">...</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ol start="2"><li>扩展运算符还可以应用于合并数组</li></ol><p>示例:</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">//扩展运算符合并数组(方法1)</span><span class="token keyword">let</span> arr1<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">let</span> arr2<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">let</span> arr3<span class="token operator">=</span><span class="token punctuation">[</span><span class="token operator">...</span>arr1<span class="token punctuation">,</span><span class="token operator">...</span>arr2<span class="token punctuation">]</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr3<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//方法二</span><span class="token keyword">let</span> arr1<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">let</span> arr2<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">;</span>arr1<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token operator">...</span>arr2<span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr1<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="3"><li> 将伪数组转换为真正的数组这样做的好处就是能够使用数组里面的方法。</li></ol><p>示例: </p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">//利用扩展运算符将伪数组变成真正的数组</span><span class="token keyword">let</span> div<span class="token operator">=</span>document<span class="token punctuation">.</span><span class="token function">querySelectorAll</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> ary<span class="token operator">=</span><span class="token punctuation">[</span><span class="token operator">...</span>div<span class="token punctuation">]</span><span class="token punctuation">;</span>ary<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">,</span><span class="token string">'b'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>ary<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="构造函数方法：Array-form"><a href="#构造函数方法：Array-form" class="headerlink" title="构造函数方法：Array.form()"></a>构造函数方法：Array.form()</h3><p>该方法可以接受两个参数，作用类似于数组的map方法，用来对每个元素进行处理，将处理后的值放入返回的数组,可以把伪数组转化成真正的数组。</p><h3 id="实例方法：find"><a href="#实例方法：find" class="headerlink" title="实例方法：find()"></a>实例方法：find()</h3><p>find()方法用于找出第一个符合条件的数组成员,如果没有找到返回undefined。</p><p>示例: </p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">//find方法</span><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">&#123;</span>id<span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">,</span>name<span class="token operator">:</span><span class="token string">'张三'</span><span class="token punctuation">,</span>age<span class="token operator">:</span><span class="token number">18</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span>id<span class="token operator">:</span><span class="token number">2</span><span class="token punctuation">,</span>name<span class="token operator">:</span><span class="token string">'李四'</span><span class="token punctuation">,</span>age<span class="token operator">:</span><span class="token number">20</span><span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">let</span> target<span class="token operator">=</span>arr<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">vlaue<span class="token punctuation">,</span>index</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> vlaue<span class="token punctuation">.</span>id<span class="token operator">==</span><span class="token number">2</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="案例方法-findIndex"><a href="#案例方法-findIndex" class="headerlink" title="案例方法:findIndex()"></a>案例方法:findIndex()</h3><p>用于找出第一个符合条件的数组成员的位置，如果没有找到返回-1。</p><p>示例: </p><pre><code>    //findIndex()方法    let ary=[20,14,34,56,64,28];    let res=ary.findIndex((item,index)=&gt;&#123;        return item&lt; 20;    &#125;);    console.log(res);    </code></pre><h3 id="案例方法-includes"><a href="#案例方法-includes" class="headerlink" title="案例方法:includes()"></a>案例方法:includes()</h3><p>表示某个数组是否包含给定的值，返回布尔值。</p><p>示例: </p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 数组去重let arr2 = ['A', 'C', 'C', 'B','D','B','A'];</span><span class="token keyword">var</span> xarr<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>arr2<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>xarr<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token operator">==</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>xarr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>xarr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//indexof()方法案例</span><span class="token keyword">let</span> arr1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'pink'</span><span class="token punctuation">,</span> <span class="token string">'green'</span><span class="token punctuation">,</span> <span class="token string">'blue'</span><span class="token punctuation">,</span> <span class="token string">'red'</span><span class="token punctuation">,</span><span class="token string">'blue'</span><span class="token punctuation">,</span><span class="token string">'pink'</span><span class="token punctuation">,</span><span class="token string">'red'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">let</span> newarr<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>arr1<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">value<span class="token punctuation">,</span>index</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>newarr<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token operator">===</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>     newarr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>newarr<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="string的扩展方法"><a href="#string的扩展方法" class="headerlink" title="string的扩展方法"></a>string的扩展方法</h3><h4 id="模板字符串"><a href="#模板字符串" class="headerlink" title="模板字符串"></a>模板字符串</h4><ol><li>ES6新增的创建字符串的方式使用反引号定义。</li></ol><p>​    let name =<code>张三</code></p><ol start="2"><li>模板字符串可以解析变量</li></ol><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> name <span class="token operator">=</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">张三</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span><span class="token keyword">let</span> sayhello<span class="token operator">=</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">hello,my name is </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>name<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ol start="3"><li>模板字符串可以换行</li><li>在模板字符串中可以调用函数。</li></ol><p>示例: </p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">//模板字符串</span><span class="token keyword">let</span> result<span class="token operator">=</span><span class="token punctuation">&#123;</span>name<span class="token operator">:</span><span class="token string">'张三'</span><span class="token punctuation">,</span>age<span class="token operator">:</span><span class="token number">18</span><span class="token punctuation">,</span>sex<span class="token operator">:</span><span class="token string">'男'</span><span class="token punctuation">&#125;</span><span class="token keyword">let</span> html<span class="token operator">=</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">&lt;div>&lt;span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>result<span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">&lt;/span>&lt;span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>result<span class="token punctuation">.</span>age<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">&lt;/span>&lt;span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>result<span class="token punctuation">.</span>sex<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">&lt;/span>&lt;/div></span><span class="token template-punctuation string">`</span></span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>html<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="实例方法-startswith-和endswith"><a href="#实例方法-startswith-和endswith" class="headerlink" title="实例方法:startswith()和endswith()"></a>实例方法:startswith()和endswith()</h3><ol><li>startswith():表示参数字符串是否在原字符串的头部，返回布尔值。</li><li>endswith():表示参数字符串是否在原字符串的尾部，返回布尔值。</li></ol><p>示例:</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">//startswith()方法和endswith()方法</span><span class="token keyword">let</span> str<span class="token operator">=</span><span class="token string">'我不是张三 哈哈哈!'</span><span class="token punctuation">;</span><span class="token keyword">let</span> res1<span class="token operator">=</span>str<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">'我不是张三'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> res2<span class="token operator">=</span>str<span class="token punctuation">.</span><span class="token function">endsWith</span><span class="token punctuation">(</span><span class="token string">'哈哈哈!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res1<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res2<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="实例方法-repeat"><a href="#实例方法-repeat" class="headerlink" title="实例方法:repeat()"></a>实例方法:repeat()</h3><p>repeat()方法表示将原字符串重复n次，返回一个新字符串。</p><p>示例: </p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// repeat()方法</span><span class="token keyword">let</span> str<span class="token operator">=</span><span class="token string">'张三\t'</span><span class="token punctuation">.</span><span class="token function">repeat</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="set数据结构"><a href="#set数据结构" class="headerlink" title="set数据结构"></a>set数据结构</h3><ol><li>ES6提供了新的数据结构Set。它类似于数组，但是成员的值都是唯一的，没有重复的值。</li><li>Set本身是一个构造函数，用来生成Set的数据结构。<br><code>let s = new Set();</code></li><li>Set函数可以接受一个数组作参数，用来初始化。<br><code>let set1 = new Set([1,2,3,4,5,6]);</code></li></ol><p>示例: </p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">//Set数据结构</span><span class="token keyword">let</span> s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>size<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>示例: </p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">//利用Set数据结构对数组进行去重</span><span class="token keyword">let</span> item <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'blue'</span><span class="token punctuation">,</span><span class="token string">'red'</span><span class="token punctuation">,</span><span class="token string">'green'</span><span class="token punctuation">,</span><span class="token string">'pink'</span><span class="token punctuation">,</span><span class="token string">'red'</span><span class="token punctuation">,</span><span class="token string">'blue'</span><span class="token punctuation">,</span><span class="token string">'green'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> res<span class="token operator">=</span><span class="token punctuation">[</span><span class="token operator">...</span>item<span class="token punctuation">]</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="set的实例方法"><a href="#set的实例方法" class="headerlink" title="set的实例方法"></a>set的实例方法</h4><ol><li>add(value):添加某一个值，返回set结构本身。</li><li>delete(value):删除某一个值，返回一个布尔值，表示删除是否成功。</li><li>has(value):返回一个布尔值，表示该值是否为set的成员。</li><li>clear():清除所有成员，没有返回值。</li></ol><p>示例: </p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">//Set实例方法add();</span><span class="token keyword">let</span> b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> res1<span class="token operator">=</span>b<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span>size<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//Set实例方法delte();</span><span class="token keyword">let</span> res2<span class="token operator">=</span>b<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span>size<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//Set实例方法has();</span><span class="token keyword">let</span> res3<span class="token operator">=</span>b<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span>size<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res3<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//已经删除了2这里has表示不存在这个元素。</span><span class="token comment">//Set实例方法clear()</span><span class="token keyword">let</span> res4<span class="token operator">=</span>b<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span>size<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="遍历"><a href="#遍历" class="headerlink" title="遍历"></a>遍历</h4><p>Set结构的实例与数组一样，也拥有forEach方法，用于对每一个成员执行某种操作，没有返回值。</p><p>示例: </p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">//Set可以用forEach()方法进行遍历;</span><span class="token keyword">let</span> f <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'张三'</span><span class="token punctuation">,</span><span class="token string">'李四'</span><span class="token punctuation">,</span><span class="token string">'王二'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>f<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> js </category>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> js </tag>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>正则表达式</title>
      <link href="/2021/07/11/regexp/"/>
      <url>/2021/07/11/regexp/</url>
      
        <content type="html"><![CDATA[<h1 class="bamboo-h " id="正则表达式">正则表达式</h1><br/><h2 id="什么是正则表达式"><a href="#什么是正则表达式" class="headerlink" title="什么是正则表达式"></a>什么是正则表达式</h2><blockquote><p>正则表达式是用于匹配字符串中字符组合模式。在javascript中，正则表达式也是对象。</p></blockquote><blockquote><p>正则表达式通常被用来检索、替换那些符合某个模式(规则)的文本，例如表单验证：用户名表单只能输入英文字母、数字或者下划线，昵称输入框中可以输入中文(匹配)。此外，正则表达式还常用于过滤掉页面内容中的一些敏感词(替换)，或字符串中获取我们想要的特定部分(提取)等。</p></blockquote><h3 id="正则表达式的特点"><a href="#正则表达式的特点" class="headerlink" title="正则表达式的特点"></a>正则表达式的特点</h3><ol><li>灵活性，逻辑性和功能性非常的强。</li><li>可以迅速地用简单的方式达到字符串的复杂控制。</li><li>对于刚接触的人来说比较晦涩难懂。比如：^\w+([-+.]\w+)<em>@\w+([-.]\w+)</em>$。</li><li>实际开发，一般都是复制写好的正则表达式，但是要求会使用正则表达式并且根据实际情况修改正则表达式.比如用户名：/^[a-z0-9_-]{3,16}$/。</li></ol><h3 id="创建正则表达式"><a href="#创建正则表达式" class="headerlink" title="创建正则表达式"></a>创建正则表达式</h3><h4 id="在javascript中，可以通过两种方式创建一个正则表达式。"><a href="#在javascript中，可以通过两种方式创建一个正则表达式。" class="headerlink" title="在javascript中，可以通过两种方式创建一个正则表达式。"></a>在javascript中，可以通过两种方式创建一个正则表达式。</h4><ol><li>通过调用RegExp对象的构造函数创建。</li></ol><blockquote><p>var 变量名 = new RegExp(/表达式/);</p></blockquote><ol start="2"><li>通过字面量创建</li></ol><blockquote><p>var 变量名 = /表达式/;</p></blockquote><h3 id="测试正则表达式test方法"><a href="#测试正则表达式test方法" class="headerlink" title="测试正则表达式test方法"></a>测试正则表达式test方法</h3><ul><li>test()正则对象方法，用于检测字符串是否符合规则，该对象会返回true或false，其参数是测试字符串。</li></ul><p><code>regexobj.test(str)</code></p><ol><li>regexobj是写的正则表达式</li><li>str我们要测试的文本</li><li>就是检测str文本是否符合我们写的正则表达式规范。</li></ol><h3 id="正则表达式中的特殊字符"><a href="#正则表达式中的特殊字符" class="headerlink" title="正则表达式中的特殊字符"></a>正则表达式中的特殊字符</h3><h4 id="正则表达式的组成"><a href="#正则表达式的组成" class="headerlink" title="正则表达式的组成"></a>正则表达式的组成</h4><blockquote><p>一个正则表达式可以由简单的字符构成，比如/abc/，也可以是简单和特殊字符的组合，比如/ab*c/。其中特殊字符也被称为元字符，在正则表达式中是具有特殊意义的专用符号，如、$、+等。</p></blockquote><h3 id="边界符"><a href="#边界符" class="headerlink" title="边界符"></a>边界符</h3><ol><li>^:表示匹配首行的文本(以谁开始)</li><li>$:表示匹配行尾的文本(以谁结束)</li></ol><p>代码示例:</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">//边界符</span><span class="token keyword">var</span> reg<span class="token operator">=</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^abc</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>reg<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">'abc'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>reg<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">'aabc'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>reg<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">'abcabc'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> result<span class="token operator">=</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^abc$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">'abc'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">'abcabc'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="字符类"><a href="#字符类" class="headerlink" title="字符类"></a>字符类</h3><blockquote><p>字符类表示有一系列字符可供选择，只要匹配其中一个就可以了。所有可供选择的字符都放在方括号内。</p></blockquote><blockquote><p>[-]方括号内部 范围符-</p></blockquote><p>代码示例:</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">//字符类：[]表示由一系列字符可供选择，只要匹配其中一个就可以</span><span class="token comment">//只要包含a和b或者c都行</span><span class="token keyword">var</span> res<span class="token operator">=</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">[abc]</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">'abc'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">'aredf'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">'blue'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">'color'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">'red'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//三选一只有a和b或者c才返回true</span><span class="token keyword">var</span> res2<span class="token operator">=</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^[abc]$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res2<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res2<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">'b'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res2<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">'b'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res2<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">'abc'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//匹配26个字母当中任何一个(不包括大写26个字母) 返回true</span><span class="token keyword">var</span> res3<span class="token operator">=</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^[a-z]$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res3<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res3<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">'e'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res3<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">'f'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res3<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">'A'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li>字符组合<br><code>/^[a-zA-Z0-9_-]$/</code></li><li>[^]方括号内部 取反符^<br><code>/^[^abc]$</code></li></ol><p>代码示例:</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">//字符组合</span><span class="token keyword">var</span> res4<span class="token operator">=</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^[abcA-z_-]$</span><span class="token regex-delimiter">/</span></span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res4<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res4<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">'A'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res4<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">'_'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res4<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">'-'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res4<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">'!'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//取反字符组合</span><span class="token keyword">var</span> res4<span class="token operator">=</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^[^abcA-z_-]$</span><span class="token regex-delimiter">/</span></span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res4<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res4<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">'A'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res4<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">'_'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res4<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">'-'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res4<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">'+'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="量词符"><a href="#量词符" class="headerlink" title="量词符"></a>量词符</h3><p>量词符用来设定某个模式出现的次数</p><table><thead><tr><th>量词</th><th align="center">说明</th></tr></thead><tbody><tr><td>*</td><td align="center">重复零次或更多次</td></tr><tr><td>+</td><td align="center">重复一次或跟多次</td></tr><tr><td>？</td><td align="center">重复零次或一次</td></tr><tr><td>{n}</td><td align="center">重复n次</td></tr><tr><td>{n,}</td><td align="center">重复n次或更多次</td></tr><tr><td>{n,m}</td><td align="center">重复n到m次</td></tr></tbody></table><p>代码示例:</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> res5<span class="token operator">=</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^[abcA-z0-9_-]&#123;6,16&#125;$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res5<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">'name-andy'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res5<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">'andy_red'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res5<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">'andyjFGHXH5678z'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res5<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">'andy!'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>表单验证案例:</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">//表单验证案例</span><span class="token keyword">var</span> reg<span class="token operator">=</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^[a-zA-Z0-9_-]&#123;6,16&#125;$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span><span class="token keyword">var</span> text<span class="token operator">=</span>document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'input'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> font<span class="token operator">=</span>document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'span'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>text<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'blur'</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>reg<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>font<span class="token punctuation">.</span>innerHTML<span class="token operator">=</span><span class="token string">'输入的格式正确!'</span><span class="token punctuation">;</span>font<span class="token punctuation">.</span>className<span class="token operator">=</span><span class="token string">'right'</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>value<span class="token operator">==</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>font<span class="token punctuation">.</span>innerHTML<span class="token operator">=</span><span class="token string">'请输入内容哦！'</span><span class="token punctuation">;</span>font<span class="token punctuation">.</span>className<span class="token operator">=</span><span class="token string">'blue'</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>font<span class="token punctuation">.</span>innerHTML<span class="token operator">=</span><span class="token string">'输入的格式错误！请重新输入！'</span>font<span class="token punctuation">.</span>className<span class="token operator">=</span><span class="token string">'erro'</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="括号总结"><a href="#括号总结" class="headerlink" title="括号总结"></a>括号总结</h3><ol><li>大括号 量词符 里面表示重复次数</li><li>中括号字符集合。匹配方括号中的任意字符(多选一)</li><li>小括号表示优先级</li></ol><h3 id="预定义类"><a href="#预定义类" class="headerlink" title="预定义类"></a>预定义类</h3><table><thead><tr><th>预定义类</th><th align="center">说明</th></tr></thead><tbody><tr><td>\d</td><td align="center">匹配0-9任意数字，相当于[0-9]</td></tr><tr><td>\D</td><td align="center">匹配0-9以外的字符，相当于[^0-9]</td></tr><tr><td>\w</td><td align="center">匹配任意的字母，数字和下划线，相当于[A-Za-z0-9]</td></tr><tr><td>\W</td><td align="center">除所有字母、数字和下划线以外的字符，相当于[^A-Za-z0-9]</td></tr><tr><td>\s</td><td align="center">匹配空格(包括换行符、制表符、空格等)，相当于[\t\r\n\v\f]</td></tr><tr><td>\S</td><td align="center">匹配非空格的字符，相当于[^\t\r\n\v\f]</td></tr></tbody></table><h3 id="表单验证案例分析"><a href="#表单验证案例分析" class="headerlink" title="表单验证案例分析"></a>表单验证案例分析</h3><ol><li>手机号码：/^1[3|4|5|7|8]\d{9}$/</li><li>QQ:[1-9][0-9]{4,}(腾讯QQ号从10000开始)</li><li>昵称中文：^[\u4e00-\u9fa5]{2,8}$</li></ol><h3 id="正则表达式中的替换"><a href="#正则表达式中的替换" class="headerlink" title="正则表达式中的替换"></a>正则表达式中的替换</h3><p>replace()方法可以实现替换字符操作，用来替换的参数可以是一个字符串或是一个正则表达式。</p><p><code>string.replace(reg/substr/replace)</code></p><ol><li>第一个参数：被替换的字符串或者正则表达式</li><li>第二个参数：替换为的字符串</li><li>返回值是一个替换完毕的新字符串</li></ol><h3 id="正则表达式参数"><a href="#正则表达式参数" class="headerlink" title="正则表达式参数"></a>正则表达式参数</h3><blockquote><p>/表达式/[switch]</p></blockquote><p>switch(也称为修饰符)按照什么样的模式来匹配有三种值：</p><ul><li>g:全局匹配</li><li>i:忽略大小</li><li>gi:全局匹配+忽略大小写</li></ul><p>案例:</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> text<span class="token operator">=</span>document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'textarea'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> btn<span class="token operator">=</span>document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'button'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> div<span class="token operator">=</span>document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>btn<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>div<span class="token punctuation">.</span>innerHTML<span class="token operator">=</span>text<span class="token punctuation">.</span>value<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">激情|傻子</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span><span class="token string">'**'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> js </category>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> js </tag>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>函数</title>
      <link href="/2021/07/10/function/"/>
      <url>/2021/07/10/function/</url>
      
        <content type="html"><![CDATA[<h1 class="bamboo-h " id="函数">函数</h1><br/><h2 id="函数的定义和调用"><a href="#函数的定义和调用" class="headerlink" title="函数的定义和调用"></a>函数的定义和调用</h2><h3 id="函数的定义方式"><a href="#函数的定义方式" class="headerlink" title="函数的定义方式"></a>函数的定义方式</h3><ul><li>函数声明方式function关键字(命名函数)</li><li>函数表达式(匿名函数)</li><li>new Function()</li></ul><p><code>    var fn = new Function(&#39;参数1&#39;,&#39;参数2&#39;,......,&#39;函数体&#39;)</code></p><ul><li>Function里面参数都必须是字符串格式</li><li>第三种方式执行效率低，也不方便书写，因此较少使用</li><li>第三种方式执行效率低，也不方便书写，因此较少使用</li><li>函数也属于对象</li></ul><h3 id="函数的调用方式"><a href="#函数的调用方式" class="headerlink" title="函数的调用方式"></a>函数的调用方式</h3><ol><li>普通函数</li><li>对象的方法</li><li>构造函数</li><li>绑定事件函数</li><li>定时器函数</li><li>立即执行函数</li></ol><h3 id="函数内的this指向"><a href="#函数内的this指向" class="headerlink" title="函数内的this指向"></a>函数内的this指向</h3><blockquote><p>这些this的指向，是当我们调用函数的时候确定的。调用方式的不同决定了this的指向不同this一般指向我们的调用者。</p></blockquote><table><thead><tr><th>调用方式</th><th align="center">this指向</th></tr></thead><tbody><tr><td>普通函数第调用</td><td align="center">window</td></tr><tr><td>构造函数调用</td><td align="center">实例对象 原型对象里面的方法也指向实例对象</td></tr><tr><td>对象方法调用</td><td align="center">该方法所属对象</td></tr><tr><td>事件绑定方法</td><td align="center">绑定事件对象</td></tr><tr><td>定时器函数</td><td align="center">window</td></tr><tr><td>立即执行函数</td><td align="center">window</td></tr></tbody></table><h3 id="改变函数内部的this指向"><a href="#改变函数内部的this指向" class="headerlink" title="改变函数内部的this指向"></a>改变函数内部的this指向</h3><blockquote><p>javascript为我们提供了一些函数方法来帮我们更优雅的处理函数内部this指向的问题，常用的有bind() call() apply()三种方法。</p></blockquote><ol><li>call()方法<blockquote><p>call方法可以用来调用函数、改变函数内部的this指向、向函数传递参数。</p></blockquote></li></ol><p> <code> fun.call(thisArg,a,b) </code></p><ul><li>thisArg：在函数运行时指定的this值</li><li>a,b：传递的参数值</li></ul><ol start="2"><li>apply()方法<blockquote><p>apply()方法调用一个函数，简单理解为调用函数的方式，但是他可以改变函数的this指向。</p></blockquote></li></ol><p><code>fun.apply(thisArg,[arr])</code></p><p>示例代码:</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">//apply()方法改变函数的this指向</span><span class="token keyword">var</span> o<span class="token operator">=</span><span class="token punctuation">&#123;</span>name<span class="token operator">:</span><span class="token string">'张三'</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">Fn</span><span class="token punctuation">(</span><span class="token parameter">arr</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">Fn</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>o<span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">'red'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//求最大值</span><span class="token keyword">var</span> arr1<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">55</span><span class="token punctuation">,</span><span class="token number">33</span><span class="token punctuation">,</span><span class="token number">77</span><span class="token punctuation">,</span><span class="token number">99</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">var</span> max<span class="token operator">=</span>Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>Math<span class="token punctuation">,</span>arr1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> min<span class="token operator">=</span>Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>Math<span class="token punctuation">,</span>arr1<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>max<span class="token punctuation">,</span>min<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="3"><li>bind()方法</li></ol><blockquote><p>bind()方法不会调用函数，但是能改变函数内部的this指向。</p></blockquote><p><code>fun.bind(thisArg,arg,arg,.......)</code></p><ul><li>thisArg：在fun函数运行时指定的this值</li><li>arg1,arg2：传递的其它参数</li><li>返回由指定的this值和初始化参数改造的原函数拷贝</li><li>返回的是原函数改变this之后产生的新函数</li></ul><p>示例代码:</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">//bind()方法</span><span class="token keyword">var</span> x<span class="token operator">=</span><span class="token punctuation">&#123;</span>name<span class="token operator">:</span><span class="token string">'张雨生'</span><span class="token punctuation">,</span>age<span class="token operator">:</span><span class="token number">20</span><span class="token punctuation">,</span>xn<span class="token operator">:</span><span class="token string">'男'</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span>b</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token operator">+</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">var</span> f<span class="token operator">=</span><span class="token function">fn</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//不会调用原函数</span><span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="高阶函数"><a href="#高阶函数" class="headerlink" title="高阶函数"></a>高阶函数</h3><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token parameter">c</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    c <span class="token operator">&amp;&amp;</span> <span class="token function">c</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">cb</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'你好'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>函数也是一种数据类型，同样可以作为参数，传递给另外一个参数使用，最典型的就是作为回调函数。</p></blockquote><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>此时fn就是一个高阶函数。</p></blockquote><h3 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h3><h4 id="变量作用域"><a href="#变量作用域" class="headerlink" title="变量作用域"></a>变量作用域</h4><blockquote><p>变量根据作用域不同分为两种：全局变量和局部变量。</p></blockquote><ol><li>函数内部可以使用全局变量</li><li>函数外部不可以使用局部变量</li><li>当函数执行完毕，本作用域内的局部变量会销毁</li></ol><h4 id="什么是闭包"><a href="#什么是闭包" class="headerlink" title="什么是闭包"></a>什么是闭包</h4><blockquote><span class='p red'>闭包指有权访问另一个函数作用域中的变量的函数，简单理解就是，一个作用域可以访问另一个函数内部的局部变量。</span></blockquote><p>闭包的作用: <span class='p red'>延伸了变量的作用范围。</span></p><p>示例代码:</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">//闭包(内部函数访问外部函数的局部变量)</span><span class="token keyword">function</span> <span class="token function">fn1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">var</span> num<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">fn2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">fn2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">fn1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>代码示例2:</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">//闭包(内部函数访问外部函数的局部变量)</span><span class="token keyword">function</span> <span class="token function">fn1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token keyword">var</span> num<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">;</span> <span class="token keyword">function</span> <span class="token function">fn2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token function">fn2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span> <span class="token function">fn1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//这是简写</span><span class="token keyword">function</span> <span class="token function">num</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">var</span> num<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>           <span class="token comment">//返回值可以实现全局作用域访问局部作用域里面的变量就相当于return赋值给f然后f调用同时它也叫高阶函数。</span>             console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">var</span> f<span class="token operator">=</span><span class="token function">num</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>闭包案例:</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">//闭包案例</span><span class="token comment">//原来的写法</span><span class="token keyword">var</span> list<span class="token operator">=</span>document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'ul'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">querySelectorAll</span><span class="token punctuation">(</span><span class="token string">'li'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>list<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>list<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>index<span class="token operator">=</span>i<span class="token punctuation">;</span>list<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function-variable function">onclick</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//用闭包实现点击当前小li获取当前的索引号</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>list<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">i</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>list<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function-variable function">onclick</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//闭包定时器案例</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>list<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">n</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>list<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">.</span>innerHTML<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 用闭包求打车价格</span><span class="token keyword">let</span> car<span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">let</span> start <span class="token operator">=</span> <span class="token number">13</span><span class="token punctuation">;</span> <span class="token comment">//起步价</span><span class="token keyword">let</span> total <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">//总价</span><span class="token keyword">return</span><span class="token punctuation">&#123;</span><span class="token function-variable function">price</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">n</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token operator">&lt;=</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>total<span class="token operator">=</span>start<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>total<span class="token operator">=</span>start<span class="token operator">+</span><span class="token punctuation">(</span>n<span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">5</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> total<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token function-variable function">wall</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">flag</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> flag <span class="token operator">?</span> total<span class="token operator">+</span><span class="token number">10</span> <span class="token operator">:</span> total<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> result<span class="token operator">=</span>car<span class="token punctuation">.</span><span class="token function">price</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> wal<span class="token operator">=</span>car<span class="token punctuation">.</span><span class="token function">wall</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>wal<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h3><blockquote><p> 如果一个函数在内部可以调用其本身，那么这个函数就是递归函数。简单理解：函数内部自己调用自己这个函数就是递归函数，递归函数的作用和循环效果一样。<br>由于递归很容易发生”栈溢出”错误，所以必须要加退出条件 return。</p></blockquote><p>代码示例:</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">//递归案例求1~n的阶乘</span><span class="token keyword">function</span> <span class="token function">f1</span><span class="token punctuation">(</span><span class="token parameter">n</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> n<span class="token operator">*</span><span class="token function">f1</span><span class="token punctuation">(</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">var</span> result<span class="token operator">=</span><span class="token function">f1</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token number">3</span><span class="token operator">*</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token number">2</span><span class="token number">2</span><span class="token operator">*</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token number">1</span><span class="token number">3</span><span class="token operator">*</span><span class="token number">1</span><span class="token number">3</span><span class="token operator">*</span><span class="token number">2</span><span class="token number">6</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>代码示例2: </p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">//利用递归求斐波那契数列 1,1,2,3,5,8,13,21......</span><span class="token comment">//用户输入一个数字n就可以求出这个数字对应的数列值。</span><span class="token keyword">function</span> <span class="token function">series</span><span class="token punctuation">(</span><span class="token parameter">n</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token number">1</span> <span class="token operator">||</span> n <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token function">series</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">series</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token function">series</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>代码示例3:</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 利用递归遍历数据</span><span class="token keyword">var</span> data <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">&#123;</span>id<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>name<span class="token operator">:</span> <span class="token string">'家电'</span><span class="token punctuation">,</span>gods<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">&#123;</span>id<span class="token operator">:</span> <span class="token number">11</span><span class="token punctuation">,</span>name<span class="token operator">:</span> <span class="token string">'电视'</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span>id<span class="token operator">:</span> <span class="token number">12</span><span class="token punctuation">,</span>name<span class="token operator">:</span> <span class="token string">'洗衣机'</span><span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span>id<span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>name<span class="token operator">:</span> <span class="token string">'服饰'</span><span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">getdata</span><span class="token punctuation">(</span><span class="token parameter">json<span class="token punctuation">,</span> id</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">let</span> o<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>json<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>value<span class="token punctuation">.</span>id <span class="token operator">==</span> id<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>o<span class="token operator">=</span>value<span class="token punctuation">;</span><span class="token keyword">return</span> value<span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>value<span class="token punctuation">.</span>gods <span class="token operator">&amp;&amp;</span> value<span class="token punctuation">.</span>gods<span class="token punctuation">.</span>length <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>o<span class="token operator">=</span><span class="token function">getdata</span><span class="token punctuation">(</span>value<span class="token punctuation">.</span>gods<span class="token punctuation">,</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> o<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token function">getdata</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="浅拷贝和深拷贝"><a href="#浅拷贝和深拷贝" class="headerlink" title="浅拷贝和深拷贝"></a>浅拷贝和深拷贝</h3><ol><li>浅拷贝：浅拷贝只是拷贝一层，更深层次对象级别的只拷贝引用。</li><li>浅拷贝在拷贝复杂类型的时候拷贝的是复杂类型的地址，如果修改了拷贝过来的对象或者是数组的里面的数据那么原拷贝对象里面的数据也会被修改。</li><li>深拷贝：深拷贝拷贝多层，每一层的数据都会拷贝。</li><li>深拷贝在拷贝的对象或者数组等复杂类型时，他会在内存开辟一个空间单独存放拷贝过来的复杂类型，如果修改了拷贝过来的对象里面的数据原拷贝对象不会被影响(修改)。</li></ol><blockquote><p>浅拷贝方法:Object.assign(target,source)第一个参数是拷贝给谁(新对象)，第二个参数是旧对象对象。</p></blockquote><p>代码示例:</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">//实现浅拷贝</span><span class="token keyword">var</span> obj<span class="token operator">=</span><span class="token punctuation">&#123;</span>name<span class="token operator">:</span><span class="token string">'张三'</span><span class="token punctuation">,</span>age<span class="token operator">:</span><span class="token number">18</span><span class="token punctuation">,</span>msg<span class="token operator">:</span><span class="token punctuation">&#123;</span>xin_bie<span class="token operator">:</span><span class="token string">'男'</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">var</span> o<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">// for(var k in obj)&#123;</span><span class="token comment">// o[k]=obj[k]</span><span class="token comment">// &#125;</span>Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span>o<span class="token punctuation">,</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>o<span class="token punctuation">.</span>msg<span class="token operator">=</span><span class="token string">'女'</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>代码实例2:</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">//递归实现深拷贝</span><span class="token keyword">var</span> obj<span class="token operator">=</span><span class="token punctuation">&#123;</span>name<span class="token operator">:</span><span class="token string">'刘德华'</span><span class="token punctuation">,</span>age<span class="token operator">:</span><span class="token number">18</span><span class="token punctuation">,</span>msg<span class="token operator">:</span><span class="token punctuation">&#123;</span>sex<span class="token operator">:</span><span class="token string">'男'</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>color<span class="token operator">:</span><span class="token punctuation">[</span><span class="token string">'red'</span><span class="token punctuation">,</span><span class="token string">'blue'</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">var</span> o<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">copy</span><span class="token punctuation">(</span><span class="token parameter">newobj<span class="token punctuation">,</span>bj</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> k <span class="token keyword">in</span> bj<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">var</span> item<span class="token operator">=</span>bj<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//旧</span><span class="token keyword">if</span><span class="token punctuation">(</span>item <span class="token keyword">instanceof</span> <span class="token class-name">Array</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>newobj<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token function">copy</span><span class="token punctuation">(</span>newobj<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">,</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>item <span class="token keyword">instanceof</span> <span class="token class-name">Object</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>newobj<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token function">copy</span><span class="token punctuation">(</span>newobj<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">,</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>newobj<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">=</span>item<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token function">copy</span><span class="token punctuation">(</span>o<span class="token punctuation">,</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> js </category>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> js </tag>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>es5新增方法</title>
      <link href="/2021/07/10/newadd/"/>
      <url>/2021/07/10/newadd/</url>
      
        <content type="html"><![CDATA[<h1 class="bamboo-h " id="ES5中新增方法">ES5中新增方法</h1><br/><p>迭代遍历方法：forEach() map() filter() some() every()<br><code>1.array.forEach(function(value,index,arr))</code></p><ul><li>value:数组当前的值</li><li>index:数组当前的索引</li><li>arr:数组对象本身</li></ul><p>代码示例:</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">//forEach方法</span><span class="token keyword">var</span> arr<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">var</span> sum<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">var</span> res <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">value<span class="token punctuation">,</span>index<span class="token punctuation">,</span>arrs</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> sum <span class="token operator">+=</span> value<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>2.array.filter(function(value,index,arr))</code></p><p>filter()方法创建一个新的数组，新数组中的元素是通过检查指定数组中符合条件的所有元素，主要用于筛选数组还有当过滤器来使用。</p><ul><li>注意它直接返回一个新数组</li><li>value:数组当前项的值</li><li>index:数组当前</li><li>arr:数组对象本身</li></ul><p>代码示例:</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 2.filter方法</span><span class="token keyword">var</span> arr<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">15</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">35</span><span class="token punctuation">,</span><span class="token number">45</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">var</span> newarr<span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">value<span class="token punctuation">,</span>index<span class="token punctuation">,</span>arrs</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> value<span class="token operator">></span><span class="token number">10</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>newarr<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>3.array.some(value,index,arr)</code></p><ul><li>some()方法用于检测数组中的元素是否满足条件，通俗点 查找数组中是否有满足条件的元素。</li><li>注意它的返回值是布尔值，如果查找到这个元素，就返回true，如果查不到就返回false.</li><li>如果找到第一个满足条件的元素，则终止循环，不在继续查找。</li><li>value:数组当前项的值</li><li>index:数组当前</li><li>arr:数组对象本身</li></ul><p>代码示例:</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 3.some方法</span><span class="token keyword">let</span> arr<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'red'</span><span class="token punctuation">,</span><span class="token string">'blue'</span><span class="token punctuation">,</span><span class="token string">'green'</span><span class="token punctuation">,</span><span class="token string">'blue'</span><span class="token punctuation">,</span><span class="token string">'block'</span><span class="token punctuation">,</span><span class="token string">'pink'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">let</span> newarr<span class="token operator">=</span>arr<span class="token punctuation">.</span><span class="token function">some</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> value<span class="token operator">==</span><span class="token string">'blue'</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>newarr<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="字符串方法trim"><a href="#字符串方法trim" class="headerlink" title="字符串方法trim()"></a>字符串方法trim()</h3><ul><li>trim()方法会从一个字符串的两端删除空白字符。</li><li>trim()方法并不影响原字符串本身，它返回的是一个新的字符串。</li></ul><p>代码示例:</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">//字符串trim()方法案例</span><span class="token keyword">var</span> input<span class="token operator">=</span>document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'input'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> btn<span class="token operator">=</span>document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'button'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> box<span class="token operator">=</span>document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>btn<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">var</span> str<span class="token operator">=</span>input<span class="token punctuation">.</span>value<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>str<span class="token operator">==</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'请输入内容'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>box<span class="token punctuation">.</span>innerHTML<span class="token operator">=</span>input<span class="token punctuation">.</span>value<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>btn<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'blur'</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>box<span class="token punctuation">.</span>innerHTML<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">;</span>input<span class="token punctuation">.</span>value<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="对象方法Object-keys"><a href="#对象方法Object-keys" class="headerlink" title="对象方法Object.keys()"></a>对象方法Object.keys()</h3><p><code>    1.Object.keys(obj)</code></p><ul><li>效果类似for in</li><li>返回一个有属性名组成的数组</li></ul><p>代码示例:</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">//获取对象属性的方法Object.keys(obj);</span><span class="token keyword">var</span> obj<span class="token operator">=</span><span class="token punctuation">&#123;</span>name<span class="token operator">:</span><span class="token string">'刘德华'</span><span class="token punctuation">,</span>age<span class="token operator">:</span><span class="token number">18</span><span class="token punctuation">,</span>xb<span class="token operator">:</span><span class="token string">'男'</span><span class="token punctuation">&#125;</span><span class="token keyword">var</span> newobj<span class="token operator">=</span>Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>newobj<span class="token punctuation">)</span>newobj<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Object-defineProperty-定义新属性或修改原有的属性"><a href="#Object-defineProperty-定义新属性或修改原有的属性" class="headerlink" title="Object.defineProperty()定义新属性或修改原有的属性"></a>Object.defineProperty()定义新属性或修改原有的属性</h3><p><code>2.Object.defineProperty(obj,prop,descriptor)</code></p><ul><li>Object.defineProperty()第三个参数descriptor说明:以对象形式{}书写</li><li>value：设置属性的值 默认为undefined</li><li>writable：值是否可以重写(修改)。true|fase默认为false</li><li>enumerable：目标属性是否可以被枚举(遍历)，true|false默认为 false</li><li>configurable：目标属性是否可以被删除或是否可以再次修改特性true|false 默认为false</li><li>对象如果存在相关属性，value就是修改属性没有则是添加</li></ul><p>代码示例:</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">//Object.defineProperty()定义新属性或修改原有的属性</span><span class="token keyword">var</span> obj<span class="token operator">=</span><span class="token punctuation">&#123;</span>name<span class="token operator">:</span><span class="token string">'刘德华'</span><span class="token punctuation">,</span>age<span class="token operator">:</span><span class="token number">18</span><span class="token punctuation">,</span>sex<span class="token operator">:</span><span class="token string">'男'</span><span class="token punctuation">&#125;</span>Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span><span class="token string">'age'</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span>value<span class="token operator">:</span><span class="token number">20</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span><span class="token string">'id'</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span>writable<span class="token operator">:</span><span class="token boolean">false</span><span class="token punctuation">;</span><span class="token comment">//不允许修改</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> js </category>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> js </tag>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>原型继承</title>
      <link href="/2021/07/10/inherit/"/>
      <url>/2021/07/10/inherit/</url>
      
        <content type="html"><![CDATA[<h1 class="bamboo-h " id="继承">继承</h1><br/><h2 id="继承的含义"><a href="#继承的含义" class="headerlink" title="继承的含义:"></a>继承的含义:</h2><blockquote><p>继承是面向对象编程中的一个重要概念，通过继承可以使子类的实例使用在父类中定义的属性和方法。</p></blockquote><h3 id="在js中是如何实现继承的呢？"><a href="#在js中是如何实现继承的呢？" class="headerlink" title="在js中是如何实现继承的呢？"></a>在js中是如何实现继承的呢？</h3><p> 由于本人技术有限目前只知道两种继承(组合继承，和es6的继承)</p><h3 id="组合继承"><a href="#组合继承" class="headerlink" title="组合继承"></a>组合继承</h3><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 父构造函数</span><span class="token keyword">function</span> <span class="token function">Demo</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> age</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function-variable function">sing</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'我会唱歌'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'我会跳迪斯科'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//通过子类的原型继承父类的方法</span><span class="token class-name">Jc</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Demo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//指回原来的构造函数</span><span class="token class-name">Jc</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>constructor <span class="token operator">=</span> Jc<span class="token punctuation">;</span><span class="token comment">//用call()方法实现了从父类继承属性和方法</span><span class="token keyword">function</span> <span class="token function">Jc</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> age<span class="token punctuation">,</span> tw</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>tw <span class="token operator">=</span> tw<span class="token punctuation">;</span><span class="token function">Demo</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> name<span class="token punctuation">,</span> age<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">var</span> ldh <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Jc</span><span class="token punctuation">(</span><span class="token string">'张三'</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">,</span> <span class="token string">'迪斯科'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>ldh<span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token class-name">Jc</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>constructor<span class="token punctuation">)</span><span class="token punctuation">;</span>ldh<span class="token punctuation">.</span><span class="token function">sing</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这种继承方式有个缺点就是在继承父类函数的时候调用了父类构造函数，导致子类的原型上多了不需要的父类属性，存在内存上的浪费。</p><h3 id="利用class"><a href="#利用class" class="headerlink" title="利用class"></a>利用class</h3><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">class</span> <span class="token class-name">Numbear</span> <span class="token punctuation">&#123;</span><span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">x<span class="token punctuation">,</span> y</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>x <span class="token operator">=</span> x<span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>y <span class="token operator">=</span> y<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">var</span> sex <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>x <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>yconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>sex<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Num</span> <span class="token keyword">extends</span> <span class="token class-name">Numbear</span> <span class="token punctuation">&#123;</span><span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">x<span class="token punctuation">,</span> y</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">super</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>x <span class="token operator">=</span> x<span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>y <span class="token operator">=</span> y<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">result</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">var</span> sex <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>x <span class="token operator">-</span> <span class="token keyword">this</span><span class="token punctuation">.</span>y<span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>sex<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">var</span> son <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Num</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>son<span class="token punctuation">.</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>son<span class="token punctuation">.</span><span class="token function">result</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> js </category>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> js </tag>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js的原型、构造函数、原型链</title>
      <link href="/2021/07/10/prototype/"/>
      <url>/2021/07/10/prototype/</url>
      
        <content type="html"><![CDATA[<h1 class="bamboo-h " id="构造函数和原型">构造函数和原型</h1><br/><p>javaScript的构造函数中可以添加一些成员，可以再构造函数本身上添加，也可以在构造函数内部的this上添加，通过这两种方式添加的成员，就分别称为:</p><ul><li>静态成员：在构造函数本身添加的成员称为静态成员，只能由构造函数本身来访问。</li><li>实例成员：在构造函数内部创建的对象成员称为实例成员，只能由实例化的对象来访问。<blockquote><p>真正理解什么是原型是学习原型理论的关键。很多人在此产生了混淆，没有真正理解，自然后续疑惑更多。<br>首先，我们明确原型是一个对象，其次，最重要的是，每个函数都有一个属性叫做原型，这个属性指向一个对象。也就是说，原型是函数对象的属性，不是所有对象的属性，对象经过构造函数new出来，那么这个new出来的对象的构造函数有一个属性叫原型。明确这一点很重要。每次你定义一个函数的时候，这个函数的原型属性也就被定义出来了，也就可以使用了，如果不对它进行显示赋值的话，那么它的初始值就是一个空的对象Object。所以，综上我们知道我们讨论原型的时候，都是基于函数的，有了一个函数对象，就有了原型。切记这一点，讨论原型，不能脱离了函数，它是原型真正归属的地方，原型只是函数的一个属性 ！</p></blockquote></li></ul><h2 id="什么是原型？"><a href="#什么是原型？" class="headerlink" title="什么是原型？"></a>什么是原型？</h2><p>在js中任何一个函数都有一个prototype属性，原型(prototype)就是函数的一个属性，它指向一个对象。</p><h3 id="原型就是具有公共属性和方法的对象。"><a href="#原型就是具有公共属性和方法的对象。" class="headerlink" title="原型就是具有公共属性和方法的对象。"></a>原型就是具有公共属性和方法的对象。</h3><p>原型的作用其实就是为类(函数)提供了一个【公共区域】，在这个公共区域中声明的属性和方法能够被所有通过这个类所创建的对象所访问到。减少内存消耗。</p><p>· 原型作用之一:数据共享,节省内存空间</p><p>· 原型作用之二:为了实现继承</p><p>原型的优点: 在创建多个对象和方法时这时候这些方法会依次在内存独立开辟空间，为了避免内存浪费我们采用在原型里面定义这些方法，因为原型节省内存并且可以共享这些方法.</p><h3 id="对象原型-proto"><a href="#对象原型-proto" class="headerlink" title="对象原型 proto"></a>对象原型 <strong>proto</strong></h3><p>对象都会有一个属性__proto__指向构造函数的prototype原型对象，之所以我们对象可以使用构造函数prototype原型的对象属性和方法，是因为对象有__proto__原型的存在。</p><ol><li><p>__proto__对象原型和原型对象prototype是等价的。</p></li><li><p>__proto__对象原型的意义就在于为对象的查找机制提供了一个方向，或者说一条路线，但它是一个非标准属性因此实际开发中，不可以使用这个属性，它只是内部指向原型对象prototype。</p></li><li><p>方法的查找规则：首先看对象上是否有方法，如果有就执行这个对象上的方法，如果没有这个方法，那么这时对应的__proto__就会去构造函数原型对象prototype身上去查找这个方法。</p></li></ol><h3 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h3><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">Star</span><span class="token punctuation">(</span><span class="token parameter">uname<span class="token punctuation">,</span> age</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>uname <span class="token operator">=</span> name<span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span><span class="token comment">//原型 方法都可以写到这里面去因为他里面的方法都是共享的不会每次都独立开辟空间比价节省内存</span><span class="token class-name">Star</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">sing</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'我会唱歌'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">var</span> ldh <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Star</span><span class="token punctuation">(</span><span class="token string">'刘德华'</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> zxy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Star</span><span class="token punctuation">(</span><span class="token string">'张学友'</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ldh<span class="token punctuation">.</span><span class="token function">sing</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>zxy<span class="token punctuation">.</span><span class="token function">sing</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">Fn</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span>age</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>uname<span class="token operator">=</span>name<span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token operator">=</span>age<span class="token punctuation">;</span><span class="token class-name">Fn</span><span class="token punctuation">.</span>prototype<span class="token operator">=</span><span class="token punctuation">&#123;</span>constructor<span class="token operator">:</span>Fn<span class="token punctuation">,</span><span class="token function-variable function">sing</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'我会唱歌'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token function-variable function">tw</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'我会跳舞'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">var</span> ldh <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Fn</span><span class="token punctuation">(</span><span class="token string">'刘德华'</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> zxy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Fn</span><span class="token punctuation">(</span><span class="token string">'张学友'</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token class-name">Fn</span><span class="token punctuation">.</span>prototype<span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>ldh<span class="token punctuation">.</span>__proto__<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="constructor-构造函数"><a href="#constructor-构造函数" class="headerlink" title="constructor 构造函数"></a>constructor 构造函数</h3><p>对象原型(<strong>proto</strong>)和构造函数(prototype)原型对象里面都有一个属性constructor属性，constructor我们称为构造函数，因为他指回构造函数本身。</p><p>很多情况下我们需要手动的利用constructor这个属性指回原来的构造函数，比如把原型当作对象来存储属性，语法格式为 :构造函数名.原型={}。</p><p>如果我们修改了原来的原型对象，给原型对象赋值的是一个对象则必须手动利用constructor指回原来的构造函数。</p><h3 id="原型链"><a href="#原型链" class="headerlink" title="原型链"></a>原型链</h3><ol><li>只要有对象就有__proto__原型，指向原型对象。</li><li>我们Star原型对象里面的__proto__原型指向的是Object.proptotype。</li></ol><h3 id="js的成员查找机制"><a href="#js的成员查找机制" class="headerlink" title="js的成员查找机制"></a>js的成员查找机制</h3><ol><li>当访问一个对象的属性(包括方法)时，首先查找这个对象自身有没有这个属性。</li><li>如果没有就查找它的原型(也就是__proto__指向的prototype)。</li><li>如果还没有找到原型对象的属性（Object的原型对象）。</li><li>以此类推一直找到Object为止(null)。</li><li>__proto__对象原型的意义在于为对象成员查找机制提供一个方向，或者说一条路线。</li></ol><h3 id="原型对象的this指向"><a href="#原型对象的this指向" class="headerlink" title="原型对象的this指向"></a>原型对象的this指向</h3><ol><li>构造函数里面的this指向的是对象实例。</li><li>原型对象里面的this只有在调用的时候才知道指向谁比如创建对象实例后原型对象就指向实例化的对象。</li><li>this一般指向的是函数调用者。</li></ol><h3 id="拓展内置对象"><a href="#拓展内置对象" class="headerlink" title="拓展内置对象"></a>拓展内置对象</h3><h4 id="示例代码如下"><a href="#示例代码如下" class="headerlink" title="示例代码如下:"></a>示例代码如下:</h4><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">//拓展原型对象数组</span><span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">sum</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">var</span> sum<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token keyword">this</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>sum<span class="token operator">+=</span><span class="token keyword">this</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> sum<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">var</span> arr<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> js </category>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> js </tag>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>javaScript中的面向对象ES6</title>
      <link href="/2021/03/09/jsfile/"/>
      <url>/2021/03/09/jsfile/</url>
      
        <content type="html"><![CDATA[<h1 class="bamboo-h " id="javaScript中的面向对象概念(ES6)">javaScript中的面向对象概念(ES6)</h1><br/><h2 id="1-什么是对象？"><a href="#1-什么是对象？" class="headerlink" title="1. 什么是对象？"></a>1. 什么是对象？</h2><p>​        1. 现实生活中:万物皆对象，对象是一个具体的事物，看的见摸得着的实物。例如，一本书、一辆汽车、一个人可以是”对象”，一个数据库、一张网页、一个与远程服务器的连接也可以是”对象”(千万别理解成那个对象)。</p><p>​        2. 在javaScript中,对象是一组无序的相关属性和方法的集合，所有的事物都是对象，例如字符串、数值、数组、函数等。</p><p>​        3. 面向对象更贴近我们的实际生活，可以使用面向对象来描述现实事物，但是事物分为具体的事物和抽象的事物。</p><p>比如:手机    抽想的(泛指的)  具体的(特指的)</p><p>​        4. 对象是由属性和方法组成的。</p><ul><li>属性：事物的特征，在对象中用属性来表示(常用名词)</li><li>方法：事物的行为，在对象中用方法来表示(常用动词)</li></ul><h3 id="2-面向对象的思维特点"><a href="#2-面向对象的思维特点" class="headerlink" title="2. 面向对象的思维特点"></a>2. 面向对象的思维特点</h3><p>​    1. 抽取(抽象)对象共用的属性和行为组织(封装)成一个类(模板)。</p><p>​    2. 对类进行实例化，获取类的对象。</p><p>​    3. 面向对象编程我们考虑的是有哪些对象，按照面向对象的思维特点不断的创建对象，使用对象，指挥对象做事情。</p><h3 id="3-类-class"><a href="#3-类-class" class="headerlink" title="3. 类 class"></a>3. 类 class</h3><blockquote><p>在ES6中新增加类的概念，可以使用关键字声明一个类，之后这个类来实例化对象。</p><p>类抽象了对象的公共部分，它泛指某一大类。比如:手机 苹果</p><p>例子：对象特指某一个，通过类实例化一个具体的对象。比如我正在吃苹果。</p></blockquote><h3 id="4-创建类"><a href="#4-创建类" class="headerlink" title="4. 创建类"></a>4. 创建类</h3><p>​    语法：class 类名{//代码内容}</p><p>​    <code> var xx = new Uname</code></p><p>​    <em>注意：类必须new来实例化对象</em></p><h3 id="5-constructor构造函数"><a href="#5-constructor构造函数" class="headerlink" title="5. constructor构造函数"></a>5. constructor构造函数</h3><blockquote><p> constructor()方法是类的构造函数(默认方法)，用于传递参数，返回实例对象,通过new命令生成对象实例时，自动调用该方法，如果没有显示定义，类的内部会自动给我们创建一个constructor()</p></blockquote><p>​    实例:</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">class</span> <span class="token class-name">Start</span> <span class="token punctuation">&#123;</span><span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">uname<span class="token punctuation">,</span> age<span class="token punctuation">,</span> starger</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> uname<span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>starger <span class="token operator">=</span> starger<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">sing</span><span class="token punctuation">(</span><span class="token parameter">g</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">+</span> g<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">let</span> zs <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Start</span><span class="token punctuation">(</span><span class="token string">'张三'</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> ls <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Start</span><span class="token punctuation">(</span><span class="token string">'李四'</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">48</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>zs<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>ls<span class="token punctuation">)</span><span class="token punctuation">;</span>zs<span class="token punctuation">.</span><span class="token function">sing</span><span class="token punctuation">(</span><span class="token string">'哈哈'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ls<span class="token punctuation">.</span><span class="token function">sing</span><span class="token punctuation">(</span><span class="token string">'嘿嘿'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>运行结果：张三哈哈    李四嘿嘿</p></blockquote><p>注意点:</p><ol><li><p>通过class关键字创建类，类名我们还是习惯性首字母定义成大写。</p></li><li><p>类里面有个constructor 函数，可以接受传递过来的参数，同时    返回实例对象。</p></li><li><p>constructor函数只要 new生成实例时，就会自动调用这个函数， 如果我们不写这个函数，类也会自动生成这个函数。</p></li><li><p>生成 new 不能省略。</p></li><li><p>最后注意语法规范，创建类 类名后面要加小括号，构造函数不需    要加function。</p></li></ol><h3 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h3><p>​    现实中的继承:比如子承父业，比如我们都继承了父亲的姓。</p><blockquote><p>在ES6中实现继承的方式是通过extends关键字</p></blockquote><h3 id="super关键字"><a href="#super关键字" class="headerlink" title="super关键字"></a>super关键字</h3><p>​    <b style="color:red;">super关键字</b>用于访问和调用对象父类上的函数，可以调用父类的构造函数 也可以调用父类的普通函数。</p><ol><li><p>继承中，如果实例化子类输出一个方法，先看子类有没有这个方法，如果有就执行子类的。</p></li><li><p>继承中，如果子类里面没有，就去查找父类有没有这个方法，如果有，就执行父类这个方法(就近原则)。</p></li><li><p>子类调用父类普通函数的方法super().方法()</p></li></ol><p style="color:red;">注意：子类在构造函数中使用super，必须放到this前面(必须先调用父类的构造方法，在使用子类的构造方法)。</p><p>代码示例:</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">//父类</span><span class="token keyword">class</span> <span class="token class-name">Numbear</span><span class="token punctuation">&#123;</span><span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">x<span class="token punctuation">,</span> y</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>x <span class="token operator">=</span> x<span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>y <span class="token operator">=</span> y<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">var</span> sex <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>x <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>yconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>sex<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//子类</span><span class="token keyword">class</span> <span class="token class-name">Num</span> <span class="token keyword">extends</span> <span class="token class-name">Numbear</span> <span class="token punctuation">&#123;</span><span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">x<span class="token punctuation">,</span> y</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">super</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>x <span class="token operator">=</span> x<span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>y <span class="token operator">=</span> y<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">result</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">var</span> sex <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>x <span class="token operator">-</span> <span class="token keyword">this</span><span class="token punctuation">.</span>y<span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>sex<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">var</span> son <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Num</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>son<span class="token punctuation">.</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>son<span class="token punctuation">.</span><span class="token function">result</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>运行结果：16    4</p></blockquote><h3 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a>注意点</h3><ol><li>在ES6中没有变量提升，所以必须先定义类，才能通过类实例化对象。</li><li>类里面的共有属性和方法一定要加this使用。</li><li>constructor里面的this指向实例对象，方法里面的this指向这个方法的调用者。</li><li>有时候构造函数里面有其他对象但是我们想让他指向创建的这个对象里面的方法此时我们可以声明一个全局变量然后在构造函数里面让this赋值给一个变量通过变量来调用这个方法(变量名.）。</li></ol>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> js </category>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> js </tag>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
